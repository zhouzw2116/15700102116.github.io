<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构知识点</title>
    <link href="/2023/03/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2023/03/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><span id="more"></span><h1 id="第一章绪论"><a href="#第一章绪论" class="headerlink" title="第一章绪论"></a>第一章绪论</h1><h3 id="1-1数据结构基本概念"><a href="#1-1数据结构基本概念" class="headerlink" title="1.1数据结构基本概念"></a>1.1数据结构基本概念</h3><h5 id="数据元素"><a href="#数据元素" class="headerlink" title="数据元素"></a>数据元素</h5><p>数据元素是数据的基本单位</p><h5 id="数据结构的三要素"><a href="#数据结构的三要素" class="headerlink" title="数据结构的三要素"></a>数据结构的三要素</h5><p>数据逻辑结构，数据运算，数据的存储结构</p><h5 id="数据的逻辑结构"><a href="#数据的逻辑结构" class="headerlink" title="数据的逻辑结构"></a>数据的逻辑结构</h5><p>集合，线性结构，树形结构，图形结构</p><h5 id="数据的存储结构"><a href="#数据的存储结构" class="headerlink" title="数据的存储结构"></a>数据的存储结构</h5><p>顺序存储：逻辑上相邻元素物理存储单元也相邻，实现随机存取，但会产生外部碎片</p><p>链式存储：借助指针，充分利用所有存储单元，占额外空间，且只能顺序存取</p><p>索引存储：额外建立索引表（关键字+地址），速度快，占空间，增删较慢</p><p>散列存储：根据关键字计算存储地址，速度快，取决于散列函数的选取（可能会造成地址冲突）</p><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><p>原子类型：不可再分（bool，int）</p><p>结构类型：可在分（struct）</p><p>抽象数据类型：抽象数据组织及与之相关的操作，就是定义了一个完整的数据结构</p><p><img src="image-20230222153932899.png" alt="image-20230222153932899"></p><h3 id="1-2算法与算法评价"><a href="#1-2算法与算法评价" class="headerlink" title="1.2算法与算法评价"></a>1.2算法与算法评价</h3><h5 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a>算法特性</h5><p>有穷性：有穷步之内结束，每一步执行有穷时间</p><p>确定性：相同输入得到相同输出</p><p>可行性</p><p>输入：零或多个</p><p>输出：一个或多个</p><h5 id="好的算法要求"><a href="#好的算法要求" class="headerlink" title="好的算法要求"></a>好的算法要求</h5><p>正确性，可读性，健壮性（对非法输入可以做出处理），高效率与低存储量要求</p><p><img src="image-20230222160506729.png" alt="image-20230222160506729"></p><h5 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h5><p><img src="image-20230222193523069.png" alt="image-20230222193523069"></p><h5 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p><img src="image-20230222194833051.png" alt="image-20230222194833051"></p><h1 id="第二章线性表"><a href="#第二章线性表" class="headerlink" title="第二章线性表"></a>第二章线性表</h1><h3 id="2-1线性表定义和基本操作"><a href="#2-1线性表定义和基本操作" class="headerlink" title="2.1线性表定义和基本操作"></a>2.1线性表定义和基本操作</h3><h5 id="线性表及其特点"><a href="#线性表及其特点" class="headerlink" title="线性表及其特点"></a>线性表及其特点</h5><p>具有<strong>相同数据类型</strong>的n个<strong>数据元素</strong>的<strong>有限</strong>序列，n为表长，n=0表示空表</p><p>特点：</p><p>1.表中数据个数有限</p><p>2.具有逻辑上的顺序性</p><p>3.每个元素都是单个元素</p><p>4.数据类型相同，意味着每个元素占相同大小的存储空间</p><p>5.抽象性，仅讨论元素间的逻辑关系</p><h5 id="线性表的基本操作"><a href="#线性表的基本操作" class="headerlink" title="线性表的基本操作"></a>线性表的基本操作</h5><p>Initlist(&amp;L)；初始化表</p><p>Length(L)；返回表长</p><p>LocateElem(L,e)；按值查找</p><p>GetElem(L,i)；按位查找</p><p>ListInsert(&amp;L,i,e);插入操作，在列表L的第i个位置插入元素e</p><p>ListDelete(&amp;L,i,&amp;e);删除操作，删除列表L的第i个元素，并返回其值</p><p>PrintList(&amp;L)；按从前到后依次打印L的所有元素</p><p>Empty(L);判空操作</p><p>DestroyList(&amp;L);销毁列表L，并释放其占用的空间</p><p><img src="image-20230223212257342.png" alt="image-20230223212257342"></p><h3 id="2-2顺序表（顺序存储）"><a href="#2-2顺序表（顺序存储）" class="headerlink" title="2.2顺序表（顺序存储）"></a>2.2顺序表（顺序存储）</h3><h5 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h5><p>线性表的顺序存储</p><p>sizeof(ElemType)c语言返回数据类型大小（字节）</p><p><strong>实现(静态分配)：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> maxsize 10<span class="hljs-comment">//最大长度</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>ElemType data[maxsize];<span class="hljs-comment">//用静态数组存放数据元素</span><br><span class="hljs-type">int</span> length;<span class="hljs-comment">//顺序表当前长度</span><br>&#125;Sqlist;<br></code></pre></td></tr></table></figure><p><strong>实现(动态分配)：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> initsize 10<span class="hljs-comment">//初始长度</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>ElemType *data;<span class="hljs-comment">//用动态数组存放数据元素的指针</span><br><span class="hljs-type">int</span> length;<span class="hljs-comment">//顺序表当前长度</span><br><span class="hljs-type">int</span> maxsize;<span class="hljs-comment">//定义最大长度</span><br>&#125;Sqlist;<br><br><br><span class="hljs-comment">//动态申请和释放内存空间（malloc和free需要#include&lt;stdlib.h&gt;头文件）</span><br>L.data=(ElemType *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ElemType)*initsize);<span class="hljs-comment">//malloc用于动态申请一整片连续内存空间，返回起始指针地址，需要强制转换</span><br><span class="hljs-built_in">free</span>(L.data);<span class="hljs-comment">//释放内存</span><br><br><span class="hljs-comment">//增加动态数组的大小</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">IncreaseSize</span><span class="hljs-params">(Sqlist &amp;L,<span class="hljs-type">int</span> len)</span><br>&#123;<br>    <span class="hljs-type">int</span> *P=L.data;<br>    L,data=(<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*(len+maxsize));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;L.length;i++)<br>    &#123;<br>        L.data[i]=p[i];<br>    &#125;<br>    L.maxsize=L.maxsize+len;<br>    <span class="hljs-built_in">free</span>(p);<br>&#125;<br><br><span class="hljs-comment">//顺序表的插入</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">InsertList</span><span class="hljs-params">(Sqlist &amp;L,<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> e)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>||i&gt;length+<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(L.length&gt;=maxsize)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=L.length;j&gt;=i;j--)<span class="hljs-comment">//从后往前</span><br>    &#123;<br>        L.data[j]=L.data[j<span class="hljs-number">-1</span>];<br>    &#125;<br>    L.data[i<span class="hljs-number">-1</span>]=e;<br>    L.length++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-comment">//时间复杂度O(n)</span><br><br><span class="hljs-comment">//顺序表的删除</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">DeleteList</span><span class="hljs-params">(Sqlist &amp;L,<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> &amp;e)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>||i&gt;length)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(L.length==<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    e=L.data[i<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;L.length;j++)<span class="hljs-comment">//从前往后</span><br>    &#123;<br>        L.data[j<span class="hljs-number">-1</span>]=L.data[j];<br>    &#125;<br>    L.length--;<br>    <span class="hljs-keyword">return</span> ture;<br>&#125;<span class="hljs-comment">//时间复杂度O(n)</span><br><br><span class="hljs-comment">//顺序表的按位查找(动态)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">GetElem</span><span class="hljs-params">(Sqlist L,<span class="hljs-type">int</span> i)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>||i&gt;length)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> L.data[i<span class="hljs-number">-1</span>];<br>&#125;<span class="hljs-comment">//时间复杂度O(1)</span><br><br><span class="hljs-comment">//按值查找(结构体相等意思是所有分量要相等，c++可以使用==判断结构体是否相等，c语言不可以)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">LocateElem</span><span class="hljs-params">(Sqlist L,<span class="hljs-type">int</span> e)</span><br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;L.length;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(L.data[i]==e)<br>            <span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-comment">//时间复杂度O(n)</span><br></code></pre></td></tr></table></figure><p><strong>特点</strong></p><p>1.随机访问，能在O(1)时间内找到第i个元素</p><p>2.存储密度高</p><p>3.拓展容量不方便</p><p>4.插入，删除元素不方便</p><p><img src="image-20230223221257728.png" alt="image-20230223221257728"></p><p><img src="image-20230225210357777.png" alt="image-20230225210357777"></p><h3 id="2-3链表-链式存储"><a href="#2-3链表-链式存储" class="headerlink" title="2.3链表(链式存储)"></a>2.3链表(链式存储)</h3><h4 id="2-3-1单链表"><a href="#2-3-1单链表" class="headerlink" title="2.3.1单链表"></a>2.3.1单链表</h4><p>线性表的链式存储就是单链表</p><p>实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Lnode</span> &#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Lnode</span> *<span class="hljs-title">next</span>;</span><br>&#125;Lnode,*Linklist;<br><br><span class="hljs-comment">//初始化单链表（不带头结点）</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Initlist</span><span class="hljs-params">(Linklist &amp;L)</span><br>&#123;<br>    L=<span class="hljs-literal">NULL</span>;<span class="hljs-comment">//空表没数据，同时可以防止脏数据</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化单链表（带头结点）</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Initlist</span><span class="hljs-params">(Linklist &amp;L)</span><br>&#123;<br>    L=(Lnode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Lnode));<span class="hljs-comment">//分配一个头结点</span><br>    <span class="hljs-keyword">if</span>(L==<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//内存不足</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    L-&gt;next=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><br><span class="hljs-comment">//获取单链表L的第i个节点，Lnode *L和Linklist L是等价的，但是前者强调L是个节点，后者强调L是个单链表</span><br>Lnode *<span class="hljs-title function_">GetElem</span><span class="hljs-params">(Linklist L,<span class="hljs-type">int</span> i)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> L;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;<br>    Lnode *p=L-&gt;next;<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>&amp;&amp;j&lt;i)<br>    &#123;<br>        p=p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-comment">//在第i个位置插入元素e(带头节点)</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Insertlist</span><span class="hljs-params">(Linklist &amp;L,<span class="hljs-type">int</span> i,ElemType e)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>    Lnode *p=L;<br>    <span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span>&amp;&amp;j&lt;i<span class="hljs-number">-1</span>)<span class="hljs-comment">//找到第i-1个节点</span><br>    &#123;<br>        p=p-&gt;next;<br>        j++<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    Lnode *s=(Lnode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Lnode));<span class="hljs-comment">//结构体大小未知，需要动态分配内存</span><br>    s-&gt;next=p-&gt;next;<br>    s-&gt;data=e;<br>    p-&gt;next=s;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;   <br>&#125;<br><br><span class="hljs-comment">//在第i个位置插入元素e(不带头节点)</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Insertlist</span><span class="hljs-params">(Linklist &amp;L,<span class="hljs-type">int</span> i,ElemType e)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)<span class="hljs-comment">//需要针对第一个节点单独操作，不如带头节点的方便</span><br>    &#123;<br>        Lnode *s=(Lnode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Lnode));<br>    s-&gt;next=L;<br>    s-&gt;data=e;<br>    L=s;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>    Lnode *p=L;<br>    <span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span>&amp;&amp;j&lt;i<span class="hljs-number">-1</span>)<br>    &#123;<br>        p=p-&gt;next;<br>        j++<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    Lnode *s=(Lnode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Lnode));<br>    s-&gt;next=p-&gt;next;<br>    s-&gt;data=e;<br>    p-&gt;next=s;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;   <br>&#125;<br><br><span class="hljs-comment">//节点p的后插</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Insertnextnode</span><span class="hljs-params">(Lnode *p,Elemtype e)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    Lnode *s=(Lnode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Lnode));<br>    s-&gt;data=e;<br>    s-&gt;next=p-&gt;next;<br>    p-&gt;next=s;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//节点p的前插</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Insertprenextnode</span><span class="hljs-params">(Lnode *p,Elemtype e)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    Lnode *s=(Lnode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Lnode));<br>    s-&gt;next=p-&gt;next;<br>    p-&gt;next=s;<br>    s-&gt;data=p-&gt;data;<br>    p-&gt;data=e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//删除节点（删除节点时注意要释放内存）</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">deletenode</span><span class="hljs-params">(Linklist &amp;L,<span class="hljs-type">int</span> i,Elemtype e)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>    Lnode *p=L;<br>    <span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span>&amp;&amp;j&lt;i<span class="hljs-number">-1</span>)<br>    &#123;<br>        p=p-&gt;next;<br>        j++<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    Lnode *q=p-&gt;next;<br>    p-&gt;next=q-&gt;next;<br>    e=q-&gt;data;<br>    <span class="hljs-built_in">free</span>(q);<span class="hljs-comment">//删除节点时注意要释放内存</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">//删除节点</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">deletenode2</span><span class="hljs-params">(Lnode *p)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    Lnode *q=p-&gt;next;<br>    p-&gt;data=q-&gt;data;<br>    p-&gt;next=q-&gt;next;<br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//尾插法建立单链表（顺序）</span><br>Linklist <span class="hljs-title function_">List_tailinsert</span><span class="hljs-params">(Linklist &amp;L)</span><br>&#123;<br>    <span class="hljs-type">int</span> x;<br>    L=(Lnode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Lnode));<br>    Lnode *s,*r=L;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>    <span class="hljs-keyword">while</span>(x!=q)<br>    &#123;<br>        LinkList s=(Lnode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Lnode));<br>        s-&gt;data=x;<br>        r-&gt;next=s;<br>        r=s;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>    &#125;<br>    r-&gt;next=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br><br>Linklist <span class="hljs-title function_">List_headinsert</span><span class="hljs-params">(Linklist &amp;L)</span><span class="hljs-comment">//头插法（逆序，可实现链表的逆置）</span><br>&#123;<br>    <span class="hljs-type">int</span> x;<br>    Lnode *s;<br>    L=(Lnode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Lnode));<br>    L-&gt;next=<span class="hljs-literal">NULL</span>;<span class="hljs-comment">//没有这句可能最后一个节点指向未知内存</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,x);<br>    <span class="hljs-keyword">while</span>(x!=q)<br>    &#123;<br>        s=(Lnode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Lnode));<br>        s-&gt;data=x;<br>        s-&gt;next=L-&gt;next;<br>        L-&gt;next=s;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20230304151736123.png" alt="image-20230304151736123"></p><p><img src="image-20230304151802383.png" alt="image-20230304151802383"></p><p>!(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20230305104139277.png)</p><p><img src="image-20230305104219559.png" alt="image-20230305104219559"></p><p><img src="image-20230306183603283.png" alt="image-20230306183603283"></p><p><img src="image-20230306192411576.png" alt="image-20230306192411576"></p><h4 id="2-3-2双链表"><a href="#2-3-2双链表" class="headerlink" title="2.3.2双链表"></a>2.3.2双链表</h4><p>在单链表的基础上外加指向前驱结点的指针</p><p>实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Dnode</span> &#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Dnode</span> *<span class="hljs-title">next</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Dnode</span> *<span class="hljs-title">prior</span>;</span><br>&#125;Dnode,*Dinklist;<br><br><span class="hljs-comment">//节点p的后插</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Insertnextnode</span><span class="hljs-params">(Dnode *p,Dnode *s)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>||s==<span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    s-&gt;next=p-&gt;next;<br>    <span class="hljs-keyword">if</span>(p-&gt;next!=<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//如果p-&gt;next不是空节点，才需要给prior赋值</span><br>        p-&gt;next-&gt;prior=s;<br>    p-&gt;next=s;<br>    s-&gt;prior=p;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//节点p的前插，可以通过找到p的前驱节点并实现其后插操作实现</span><br><br><br><span class="hljs-comment">//删除节点（删除节点时注意要释放内存）</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">deletenode</span> <span class="hljs-params">(Dnode *p;)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    Dnode *q=p-&gt;next;<br>    <span class="hljs-keyword">if</span>(q!=<span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    p-&gt;next=q-&gt;next;<br>    <span class="hljs-keyword">if</span>(q-&gt;next!=<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//如果q不是最后一个节点</span><br>        q-&gt;next-&gt;prior=p;<br>    <span class="hljs-built_in">free</span>(q);<span class="hljs-comment">//删除节点时注意要释放内存</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">//销毁链表</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">DestroyList</span><span class="hljs-params">(Dlinklist &amp;L)</span><br>&#123;<br>    <span class="hljs-keyword">while</span>(L-&gt;next!=<span class="hljs-literal">NULL</span>)<br>       deletenode(L);<br>   <span class="hljs-built_in">free</span>(L);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="image-20230306200918322-16781050239191.png" alt="image-20230306200918322"></p>]]></content>
    
    
    
    <tags>
      
      <tag>考研 数据结构 算法 c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第六周作业</title>
    <link href="/2022/10/26/%E7%AC%AC%E5%85%AD%E5%91%A8%E4%BD%9C%E4%B8%9A/"/>
    <url>/2022/10/26/%E7%AC%AC%E5%85%AD%E5%91%A8%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><span id="more"></span><h2 id="一-简述DDL-DML-DCL-DQL，并且说明mysql各个关键字查询时候的先后顺序"><a href="#一-简述DDL-DML-DCL-DQL，并且说明mysql各个关键字查询时候的先后顺序" class="headerlink" title="一. 简述DDL,DML,DCL,DQL，并且说明mysql各个关键字查询时候的先后顺序"></a>一. 简述DDL,DML,DCL,DQL，并且说明mysql各个关键字查询时候的先后顺序</h2><p><strong>1. 数据查询语言DQL</strong><br>数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE<br>子句组成的查询块：<br>SELECT &lt;字段名表&gt;<br>FROM &lt;表或视图名&gt;<br>WHERE &lt;查询条件&gt;</p><h5 id="2-数据操纵语言DML"><a href="#2-数据操纵语言DML" class="headerlink" title="2 .数据操纵语言DML"></a><strong>2 .数据操纵语言DML</strong></h5><p>数据操纵语言DML主要有三种形式：<br>\1) 插入：INSERT<br>\2) 更新：UPDATE<br>\3) 删除：DELETE</p><p><strong>3. 数据定义语言DDL</strong><br>数据定义语言DDL用来创建数据库中的各种对象—–表、视图、<br>索引、同义词、聚簇等如：<br>CREATE TABLE/VIEW/INDEX/SYN/CLUSTER<br>表 视图 索引 同义词 簇</p><p>DDL操作是隐性提交的！不能rollback </p><p><strong>4. 数据控制语言DCL</strong><br>数据控制语言DCL用来授予或回收访问数据库的某种特权，并控制<br>数据库操纵事务发生的时间及效果，对数据库实行监视等。如：<br>\1) GRANT：授权。<br>\2) ROLLBACK [WORK] TO [SAVEPOINT]：回退到某一点。<br>回滚—ROLLBACK<br>回滚命令使数据库状态回到上次最后提交的状态。其格式为：<br>SQL&gt;ROLLBACK;</p><p>\3) COMMIT [WORK]：提交。</p><h5 id="mysql各个关键字查询时候的先后顺序"><a href="#mysql各个关键字查询时候的先后顺序" class="headerlink" title="mysql各个关键字查询时候的先后顺序"></a>mysql各个关键字查询时候的先后顺序</h5><p><img src="image-20221026095849909.png" alt="image-20221026095849909"></p><h2 id="二-自行设计10个sql查询语句，需要用到关键字-GROUP-BY-HAVING-ORDER-BY-LIMIT-，至少同时用到两个。"><a href="#二-自行设计10个sql查询语句，需要用到关键字-GROUP-BY-HAVING-ORDER-BY-LIMIT-，至少同时用到两个。" class="headerlink" title="二. 自行设计10个sql查询语句，需要用到关键字[GROUP BY/HAVING/ORDER BY/LIMIT]，至少同时用到两个。"></a>二. 自行设计10个sql查询语句，需要用到关键字[GROUP BY/HAVING/ORDER BY/LIMIT]，至少同时用到两个。</h2><p>1.查询男同学的信息</p><p>select * from students where Gender =’M’;</p><p><img src="image-20221026210427151.png" alt="image-20221026210427151"></p><p>2.查询Duan Yu的班级名字</p><p>select class from students,classes where students.classID=classes.classID and Name=’Duan Yu’; </p><p><img src="image-20221026210731029.png" alt="image-20221026210731029"></p><p>3.按照年龄从高到低依次查询学生的信息</p><p>select * from students order by Age desc;</p><p><img src="image-20221026210941656.png" alt="image-20221026210941656"></p><p>4.查询男女同学的平均年龄</p><p>select Gender,avg(age) from students group by Gender;</p><p><img src="image-20221026211129753.png" alt="image-20221026211129753"></p><p>5.查询30岁以上的男同学姓名</p><p>select Name from students where Gender=’M’ and Age&gt;30;</p><p><img src="image-20221026211338896.png" alt="image-20221026211338896"></p><p>6.查询班级人数大于等于2的班级</p><p>select class from students,classes where students.classID=classes.classID group by students.classID having count(*)&gt;=2;</p><p><img src="image-20221026211731996.png" alt="image-20221026211731996"></p><p>7.查询得分最高的前5名学生姓名</p><p>select Name from students,scores where students.stuID=scores.stuID order by Score limit 5;</p><p><img src="image-20221026213419576.png" alt="image-20221026213419576"></p><p>8.查询平均得分在85分以上的课程号</p><p>select scores.CourseID  from courses,scores where courses.CourseID=scores.CourseID group by scores.CourseID  having avg(Score)&gt;85;</p><p><img src="image-20221026213839920.png" alt="image-20221026213839920"></p><p>9.查看课程’Kuihua Baodian’的平均得分</p><p>select avg(Score) from courses,scores where Course=’Kuihua Baodian’ and courses.CourseID =scores.CourseID ;</p><p><img src="image-20221026214552773.png" alt="image-20221026214552773"></p><p>10.查询‘Emei Pai’年龄最大的两个人的姓名</p><p>select Name from students,classes where students.classID=classes.classID and class=’Emei Pai’ order by Age limit 2 ;</p><p><img src="image-20221026214931238.png" alt="image-20221026214931238"></p><h2 id="三-xtrabackup备份和还原数据库练习"><a href="#三-xtrabackup备份和还原数据库练习" class="headerlink" title="三. xtrabackup备份和还原数据库练习"></a>三. xtrabackup备份和还原数据库练习</h2><figure class="highlight sh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><pre><code class="hljs sh">1 备份过程<br>1）完全备份：<br>[root@centos8 ~]<span class="hljs-comment">#yum -y install percona-xtrabackup-24-2.4.20-1.el8.x86_64.rpm</span><br>[root@centos8 ~]<span class="hljs-comment">#mkdir /backup/</span><br>[root@centos8 ~]<span class="hljs-comment">#xtrabackup -uroot -p123456 --backup --target-dir=/backup/base</span><br>2）第一次修改数据<br>3）第一次增量备份<br>[root@centos8 ~]<span class="hljs-comment">#xtrabackup -uroot -p123456 --backup --target-dir=/backup/inc1 --incremental-basedir=/backup/base</span><br>4）第二次修改数据<br>5）第二次增量<br>[root@centos8 ~]<span class="hljs-comment">#xtrabackup -uroot -p123456 --backup --target-dir=/backup/inc2 --incremental-basedir=/backup/inc1</span><br>6）[root@centos8 ~]<span class="hljs-comment">#scp -r /backup/* 目标主机:/backup/</span><br><span class="hljs-comment">#备份过程生成三个备份目录</span><br>/backup/&#123;base，inc1，inc2&#125;<br>2还原过程<br>1）预准备完成备份，此选项--apply-log-only 阻止回滚未完成的事务<br>[root@centos8 ~]<span class="hljs-comment">#yum -y install percona-xtrabackup-24-2.4.20-1.el8.x86_64.rpm</span><br>[root@centos8 ~]<span class="hljs-comment">#xtrabackup --prepare --apply-log-only --target-dir=/backup/base</span><br>2）合并第1次增量备份到完全备份<br>[root@centos8 ~]<span class="hljs-comment">#xtrabackup --prepare --apply-log-only --target-dir=/backup/base </span><br>--incremental-dir=/backup/inc1<br>3）合并第2次增量备份到完全备份：最后一次还原不需要加选项--apply-log-only<br>[root@centos8 ~]<span class="hljs-comment">#xtrabackup --prepare --target-dir=/backup/base --incrementaldir=/backup/inc2</span><br>4）复制到数据库目录，注意数据库目录必须为空，MySQL服务不能启动<br>[root@centos8 ~]<span class="hljs-comment">#xtrabackup --copy-back --target-dir=/backup/base</span><br>5）还原属性：<br>[root@centos8 ~]<span class="hljs-comment">#chown -R mysql:mysql /var/lib/mysql</span><br>6）启动服务：<br>[root@centos8 ~]<span class="hljs-comment">#service mysqld start </span><br></code></pre></td></tr></table></figure><h2 id="四-实现mysql主从复制，主主复制和半同步复制"><a href="#四-实现mysql主从复制，主主复制和半同步复制" class="headerlink" title="四. 实现mysql主从复制，主主复制和半同步复制"></a>四. 实现mysql主从复制，主主复制和半同步复制</h2><h4 id="1-主从复制："><a href="#1-主从复制：" class="headerlink" title="1.主从复制："></a>1.主从复制：</h4><h5 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h5><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.0.0.127</span> mysql8.<span class="hljs-number">0</span> 主服务器<br><span class="hljs-number">10.0.0.128</span> mysql8.<span class="hljs-number">0</span> 从服务器<br></code></pre></td></tr></table></figure><h5 id="1-主节点配置："><a href="#1-主节点配置：" class="headerlink" title="1.主节点配置："></a>1.主节点配置：</h5><p>(1)启用二进制日志，设置全局唯一ID号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/my.cnf<br>[mysqld]<br>skip-name-resolve=1<br>log_bin<br>server-id=127<br></code></pre></td></tr></table></figure><p>(2)查看二进制日志的文件和位置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt; show master status;<br>+---------------+----------+--------------+------------------+-------------------+<br>| File          | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+---------------+----------+--------------+------------------+-------------------+<br>| binlog.000049 |      156 |              |                  |                   |<br>+---------------+----------+--------------+------------------+-------------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><p>(3)创建有复制权限的用户账号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">(root@localhost) [(none)]&gt;create user repluser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br>(root@localhost) [(none)]&gt;grant replication slave on *.* to repluser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>; <br></code></pre></td></tr></table></figure><h5 id="2-从节点配置"><a href="#2-从节点配置" class="headerlink" title="2.从节点配置"></a>2.从节点配置</h5><p>（1）设置ID号和只读模式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">[mysqld]<br>server_id=128<br>read-only<br></code></pre></td></tr></table></figure><p>（2）使用有复制权限的账号连接主服务器，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">CHANGE MASTER TO<br> MASTER_HOST=<span class="hljs-string">&#x27;10.0.0.127&#x27;</span>,<br> MASTER_USER=<span class="hljs-string">&#x27;repluser&#x27;</span>,<br> MASTER_PASSWORD=<span class="hljs-string">&#x27;123456&#x27;</span>,<br> MASTER_PORT=3306,<br> MASTER_LOG_FILE=<span class="hljs-string">&#x27;binlog.000049&#x27;</span>, MASTER_LOG_POS=156;<br></code></pre></td></tr></table></figure><p>（3）开启线程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt; start slave;<br>Query OK, 0 rows affected, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><h5 id="3-查看状态"><a href="#3-查看状态" class="headerlink" title="3.查看状态"></a>3.查看状态</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt; show slave status\G;<br>*************************** 1. row ***************************<br>               Slave_IO_State: Waiting <span class="hljs-keyword">for</span> <span class="hljs-built_in">source</span> to send event<br>                  Master_Host: 10.0.0.127<br>                  Master_User: repluser<br>                  Master_Port: 3306<br>                Connect_Retry: 60<br>              Master_Log_File: binlog.000049<br>          Read_Master_Log_Pos: 156<br>               Relay_Log_File: rocky2-relay-bin.000002<br>                Relay_Log_Pos: 321<br>        Relay_Master_Log_File: binlog.000049<br>             Slave_IO_Running: Yes<br>            Slave_SQL_Running: Yes<br>            ...<br></code></pre></td></tr></table></figure><p>主从建立成功</p><h4 id="2-主主复制："><a href="#2-主主复制：" class="headerlink" title="2.主主复制："></a>2.主主复制：</h4><h5 id="实验环境-1"><a href="#实验环境-1" class="headerlink" title="实验环境"></a>实验环境</h5><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.0.0.127</span> mysql8.<span class="hljs-number">0</span> 主服务器<span class="hljs-number">1</span><br><span class="hljs-number">10.0.0.128</span> mysql8.<span class="hljs-number">0</span> 主服务器<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h5 id="1-主1节点配置："><a href="#1-主1节点配置：" class="headerlink" title="1.主1节点配置："></a>1.主1节点配置：</h5><p>(1)启用二进制日志，设置全局唯一ID号，设置自动增长id为奇数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/my.cnf<br>[mysqld]<br>log_bin<br>server-id=127<br>auto_increment_offset=1 <span class="hljs-comment">#开始点</span><br>auto_increment_increment=2 <span class="hljs-comment">#增长幅度</span><br></code></pre></td></tr></table></figure><p>(2)查看二进制日志的文件和位置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt; show master status;<br>+-------------------+----------+--------------+------------------+-------------------+<br>| File              | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+-------------------+----------+--------------+------------------+-------------------+<br>| rocky1-bin.000001 |     1874 |              |                  |                   |<br>+-------------------+----------+--------------+------------------+-------------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><p>(3)创建有复制权限的用户账号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">(root@localhost) [(none)]&gt;create user repluser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br>(root@localhost) [(none)]&gt;grant replication slave on *.* to repluser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>; <br></code></pre></td></tr></table></figure><p>（4）使用有复制权限的账号连接主服务器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt;  CHANGE MASTER TO<br>    -&gt;   MASTER_HOST=<span class="hljs-string">&#x27;10.0.0.128&#x27;</span>,<br>    -&gt;   MASTER_USER=<span class="hljs-string">&#x27;repluser&#x27;</span>,<br>    -&gt;   MASTER_PASSWORD=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    -&gt;   MASTER_PORT=3306,<br>    -&gt;   MASTER_LOG_FILE=<span class="hljs-string">&#x27;binlog.000001&#x27;</span>, MASTER_LOG_POS=156;<br>Query OK, 0 rows affected, 9 warnings (0.01 sec)<br></code></pre></td></tr></table></figure><p>（5）开启线程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt; start slave;<br>Query OK, 0 rows affected, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><h5 id="2-主2节点配置"><a href="#2-主2节点配置" class="headerlink" title="2.主2节点配置"></a>2.主2节点配置</h5><p>(1)启用二进制日志，设置全局唯一ID号，设置自动增长id为偶数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/my.cnf<br>[mysqld]<br>log_bin<br>server-id=128<br>auto_increment_offset=2 <span class="hljs-comment">#开始点</span><br>auto_increment_increment=2 <span class="hljs-comment">#增长幅度</span><br></code></pre></td></tr></table></figure><p>(2)查看二进制日志的文件和位置</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">mysql&gt; show master status;</span><br><span class="hljs-section">+-------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-section">| File              | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="hljs-section">+-------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-section">| rocky2-bin.000001 |      156 |              |                  |                   |</span><br><span class="hljs-section">+-------------------+----------+--------------+------------------+-------------------+</span><br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>(3)创建有复制权限的用户账号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br>mysql&gt; create user repluser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br>Query OK, 0 rows affected (0.02 sec)<br><br>mysql&gt; grant replication slave on *.* to repluser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><p>（4）使用有复制权限的账号连接主服务器，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt;  CHANGE MASTER TO<br>    -&gt;   MASTER_HOST=<span class="hljs-string">&#x27;10.0.0.127&#x27;</span>,<br>    -&gt;   MASTER_USER=<span class="hljs-string">&#x27;repluser&#x27;</span>,<br>    -&gt;   MASTER_PASSWORD=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    -&gt;   MASTER_PORT=3306,<br>    -&gt;   MASTER_LOG_FILE=<span class="hljs-string">&#x27;binlog.000001&#x27;</span>, MASTER_LOG_POS=1874;<br>Query OK, 0 rows affected, 9 warnings (0.00 sec)<br></code></pre></td></tr></table></figure><p>（5）开启线程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt; start slave;<br>Query OK, 0 rows affected, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="3-半同步复制"><a href="#3-半同步复制" class="headerlink" title="3.半同步复制"></a>3.半同步复制</h4><h5 id="实验环境-2"><a href="#实验环境-2" class="headerlink" title="实验环境"></a>实验环境</h5><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.0.0.127</span> mysql8.<span class="hljs-number">0</span> 主服务器<br><span class="hljs-number">10.0.0.128</span> mysql8.<span class="hljs-number">0</span> 从服务器<span class="hljs-number">1</span><br><span class="hljs-number">10.0.0.130</span> ubantu   从服务器<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h5 id="1-主节点配置：-1"><a href="#1-主节点配置：-1" class="headerlink" title="1.主节点配置："></a>1.主节点配置：</h5><p>(1)安装插件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt; INSTALL PLUGIN rpl_semi_sync_master SONAME <span class="hljs-string">&#x27;semisync_master.so&#x27;</span>;<br>Query OK, 0 rows affected, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><p>(2)master服务器配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@rocky1 ~]<span class="hljs-comment">#vim /etc/my.cnf</span><br>[mysqld]<br>log_bin<br>server-id=127<br>rql_semi_sync_master_enabled =ON<br>rql_semi_sync_master_timeout=3000<br></code></pre></td></tr></table></figure><h5 id="2-从节点配置-1"><a href="#2-从节点配置-1" class="headerlink" title="2.从节点配置"></a>2.从节点配置</h5><p>（1）安装插件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt; INSTALL PLUGIN rpl_semi_sync_slave SONAME <span class="hljs-string">&#x27;semisync_slave.so&#x27;</span><br>    -&gt; ;<br>Query OK, 0 rows affected, 1 warning (0.00 sec)xxxxxxxxxx mysql&gt; INSTALL PLUGIN rpl_semi_sync_slave SONAME <span class="hljs-string">&#x27;semisync_slave.so&#x27;</span>    -&gt; ;Query OK, 0 rows affected, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><p>（2）从服务器配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"> [root@rocky2 ~]<span class="hljs-comment"># vim /etc/my.cnf #从服务器1</span><br>[mysqld]<br>server-id=128<br>rql_semi_sync_slave_enabled=on<br> <br>root@ubantu2004:~<span class="hljs-comment">#  vim /etc/mysql/mysql.cnf #从服务器2</span><br> [mysqld]<br>server-id=130<br>rql_semi_sync_slave_enabled=on<br></code></pre></td></tr></table></figure><p>（3）开启线程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt; start slave;<br>Query OK, 0 rows affected, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><h5 id="3-验证："><a href="#3-验证：" class="headerlink" title="3.验证："></a>3.验证：</h5><p>从节点mysql服务全部关闭，观察主服务器插入数据是否能提交成功</p><p><img src="image-20221029142920845.png" alt="image-20221029142920845"></p><p>由于设置了超时时间，三秒内，由于模式为半同步复制，且从服务器全部关闭服务，没收到ack，所以无法提交事务，三秒后，到达超时时间，切换为异步模式，提交成功</p><p><img src="image-20221029143203070.png" alt="image-20221029143203070"></p><h3 id="五-用mycat实现mysql的读写分离"><a href="#五-用mycat实现mysql的读写分离" class="headerlink" title="五. 用mycat实现mysql的读写分离"></a>五. 用mycat实现mysql的读写分离</h3><h5 id="实验环境-3"><a href="#实验环境-3" class="headerlink" title="实验环境"></a>实验环境</h5><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.0.0.127</span> mycat 主服务器<br><span class="hljs-number">10.0.0.128</span> mysql8.<span class="hljs-number">0</span> 主服务器负责写<br><span class="hljs-number">10.0.0.130</span> mysql8.<span class="hljs-number">0</span> 从服务器负责读<br></code></pre></td></tr></table></figure><h5 id="1-创建mysql主从数据库"><a href="#1-创建mysql主从数据库" class="headerlink" title="1.创建mysql主从数据库"></a>1.创建mysql主从数据库</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@mysql-master ~]<span class="hljs-comment"># yum -y install mysql-server</span><br>root@mysql-slave:~<span class="hljs-comment"># yum -y install mysql-server</span><br></code></pre></td></tr></table></figure><p>(1).修改mysql配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@mysql-master ~]<span class="hljs-comment"># vim /etc/my.cnf</span><br>[mysqld]<br>server-id=128<br>log-bin<br><br>root@mysql-slave:~<span class="hljs-comment"># vim /etc/mysql/my.cnf</span><br>[mysqld]<br>server-id=130<br></code></pre></td></tr></table></figure><p>(2)创建有复制权限的用户账号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt; create user repluser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br>mysql&gt; grant replication slave on *.* to repluser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>; <br>mysql&gt; show master logs;<br>+-------------------------+-----------+-----------+<br>| Log_name                | File_size | Encrypted |<br>+-------------------------+-----------+-----------+<br>| mycat-server-bin.000001 |       210 | No        |<br>| mycat-server-bin.000002 |       156 | No        |<br>+-------------------------+-----------+-----------+<br>2 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><p>(3).在slave上执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">  CHANGE MASTER TO</span><br>    -&gt;  MASTER_HOST=&#x27;10.0.0.128&#x27;,<br>    -&gt; MASTER_USER=&#x27;repluser&#x27;,<br>    -&gt;  MASTER_PASSWORD=&#x27;123456&#x27;,<br>    -&gt;  MASTER_PORT=3306,<br>    -&gt;  MASTER_LOG_FILE=&#x27;mysql-master-bin.000001&#x27;, MASTER_LOG_POS=156;<br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">start slave;</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">show slave status\G;</span><br>*************************** 1. row ***************************<br>               Slave_IO_State: Waiting for source to send event<br>                  Master_Host: 10.0.0.128<br>                  Master_User: repluser<br>                  Master_Port: 3306<br>                Connect_Retry: 60<br>              Master_Log_File: mysql-master-bin.000001<br>          Read_Master_Log_Pos: 156<br>               Relay_Log_File: mysql-slave-relay-bin.000002<br>                Relay_Log_Pos: 332<br>        Relay_Master_Log_File: mysql-master-bin.000001<br>             Slave_IO_Running: Yes<br>            Slave_SQL_Running: Yes<br>            ...<br></code></pre></td></tr></table></figure><h5 id="2-在10-0-0-127上安装并启动mycat"><a href="#2-在10-0-0-127上安装并启动mycat" class="headerlink" title="2.在10.0.0.127上安装并启动mycat"></a>2.在10.0.0.127上安装并启动mycat</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@mycat-server ~]<span class="hljs-comment">#yum -y install java</span><br>[root@mycat-server ~]<span class="hljs-comment">#java -version</span><br>openjdk version <span class="hljs-string">&quot;1.8.0_332&quot;</span><br>OpenJDK Runtime Environment (build 1.8.0_332-b09)<br>OpenJDK 64-Bit Server VM (build 25.332-b09, mixed mode)<br><br>[root@mycat-server ~]<span class="hljs-comment">#wget http://dl.mycat.org.cn/1.6.7.6/20210303094759/Mycat-server-1.6.7.6-release-20210303094759-linux.tar.gz</span><br>--2022-10-31 19:35:13--  http://dl.mycat.org.cn/1.6.7.6/20210303094759/Mycat-server-1.6.7.6-release-20210303094759-linux.tar.gz<br>Resolving dl.mycat.org.cn (dl.mycat.org.cn)... 210.51.26.184<br>Connecting to dl.mycat.org.cn (dl.mycat.org.cn)|210.51.26.184|:80... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 26030477 (25M) [application/octet-stream]<br>Saving to: ‘Mycat-server-1.6.7.6-release-20210303094759-linux.tar.gz’<br><br>Mycat-server-1.6.7.6-release-2021 100%[=============================================================&gt;]  24.82M  9.65MB/s    <span class="hljs-keyword">in</span> 2.6s    <br><br>2022-10-31 19:35:15 (9.65 MB/s) - ‘Mycat-server-1.6.7.6-release-20210303094759-linux.tar.gz’ saved [26030477/26030477]<br>[root@mycat-server ~]<span class="hljs-comment">#mkdir /apps</span><br>[root@mycat-server ~]<span class="hljs-comment">#tar xvf Mycat-server-1.6.7.6-release-20210303094759-linux.tar.gz -C /apps/</span><br><br>[root@mycat-server ~]<span class="hljs-comment">#echo &#x27;PATH=/apps/mycat/bin:$PATH&#x27; &gt;/etc/profile.d/mycat,sh  #修改环境变量</span><br>[root@mycat-server ~]<span class="hljs-comment">#.  /etc/profile.d/mycat,sh </span><br>[root@mycat-server ~]<span class="hljs-comment">#echo $PATH</span><br>/apps/mycat/bin:/usr/pgsql14//bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin<br><span class="hljs-comment">#查看端口</span><br>[root@mycat-server ~]<span class="hljs-comment">#ss -ntl</span><br>State    Recv-Q   Send-Q     Local Address:Port     Peer Address:Port  Process  <br>LISTEN   0        128              0.0.0.0:22            0.0.0.0:*               <br>LISTEN   0        128                 [::]:22               [::]:*  <br><br>LISTEN  0        128                    *:8066                 *:*  <br><span class="hljs-comment">#启动mycat</span><br>[root@mycat-server ~]<span class="hljs-comment">#mycat start</span><br>Starting Mycat-server...<br><span class="hljs-comment">#连接mycat</span><br>[root@mysql-master ~]<span class="hljs-comment"># mysql -uroot -p123456 -h 10.0.0.127 -P8066</span><br>mysql: [Warning] Using a password on the <span class="hljs-built_in">command</span> line interface can be insecure.<br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection <span class="hljs-built_in">id</span> is 1<br>Server version: 5.6.29-mycat-1.6.7.6-release-20210303094759 MyCat Server (OpenCloudDB)<br><br>Copyright (c) 2000, 2021, Oracle and/or its affiliates.<br><br>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br>Type <span class="hljs-string">&#x27;help;&#x27;</span> or <span class="hljs-string">&#x27;\h&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>. Type <span class="hljs-string">&#x27;\c&#x27;</span> to clear the current input statement.<br><br>mysql&gt; show databases;<br>+----------+<br>| DATABASE |<br>+----------+<br>| TESTDB   |<br>+----------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure><h5 id="3-在mycat服务器修改server-xml"><a href="#3-在mycat服务器修改server-xml" class="headerlink" title="3.在mycat服务器修改server.xml"></a>3.在mycat服务器修改server.xml</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@mycat-server ~]<span class="hljs-comment">#vim /apps/mycat/conf/server.xml</span><br> &lt;property name=<span class="hljs-string">&quot;serverPort&quot;</span>&gt;3306&lt;/property&gt;<br> &lt;property name=<span class="hljs-string">&quot;dataNodeIdleCheckPeriod&quot;</span>&gt;300000&lt;/property&gt;  <span class="hljs-comment"># 5 * 60 * 1000L; //连接空闲检查</span><br>                        &lt;property name=<span class="hljs-string">&quot;frontWriteQueueSize&quot;</span>&gt;4096&lt;/property&gt; &lt;property name=<span class="hljs-string">&quot;processors&quot;</span>&gt;32&lt;/property&gt; <span class="hljs-comment">#--&gt;</span><br>                &lt;!--分布式事务开关，0为不过滤分布式事务，1为过滤分布式事务（如果分布式事务内只涉及全局表，则不过滤），2为不过滤分布式事&gt;务,但是记录分布式事务日志--&gt;<br>                <br><span class="hljs-comment">#重启mycat</span><br>[root@mycat-server ~]<span class="hljs-comment">#mycat restart</span><br>Stopping Mycat-server...<br>Stopped Mycat-server.<br>Starting Mycat-server...<br></code></pre></td></tr></table></figure><h5 id="4-修改schema-xml实现读写分离"><a href="#4-修改schema-xml实现读写分离" class="headerlink" title="4.修改schema.xml实现读写分离"></a>4.修改schema.xml实现读写分离</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@mycat-server ~]<span class="hljs-comment">#vim /apps/mycat/conf/</span><br> &lt;schema name=<span class="hljs-string">&quot;TESTDB&quot;</span> checkSQLschema=<span class="hljs-string">&quot;false&quot;</span> sqlMaxLimit=<span class="hljs-string">&quot;100&quot;</span> randomDataNode=<span class="hljs-string">&quot;dn1&quot;</span>&gt;<br> &lt;dataNode name=<span class="hljs-string">&quot;dn1&quot;</span> dataHost=<span class="hljs-string">&quot;localhost1&quot;</span> database=<span class="hljs-string">&quot;mycat&quot;</span> /&gt;<br>  &lt;dataHost name=<span class="hljs-string">&quot;localhost1&quot;</span> maxCon=<span class="hljs-string">&quot;1000&quot;</span> minCon=<span class="hljs-string">&quot;10&quot;</span> balance=<span class="hljs-string">&quot;1&quot;</span><br> &lt;writeHost host=<span class="hljs-string">&quot;host1&quot;</span> url=<span class="hljs-string">&quot;10.0.0.128:3306&quot;</span> user=<span class="hljs-string">&quot;root&quot;</span>      password=<span class="hljs-string">&quot;123456&quot;</span>&gt;<br>&lt;readhost host=<span class="hljs-string">&quot;host2&quot;</span> url=<span class="hljs-string">&quot;10.0.0.130:3306&quot;</span> user=<span class="hljs-string">&quot;root&quot;</span> password=<span class="hljs-string">&quot;123456&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h5 id="5-在mysql主服务器上创建root账号并授权"><a href="#5-在mysql主服务器上创建root账号并授权" class="headerlink" title="5.在mysql主服务器上创建root账号并授权"></a>5.在mysql主服务器上创建root账号并授权</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt; create user admin@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; grant all on *.* to <span class="hljs-string">&#x27;admin&#x27;</span>@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><h5 id="6-在mycat服务器上测试连接mysql"><a href="#6-在mycat服务器上测试连接mysql" class="headerlink" title="6.在mycat服务器上测试连接mysql"></a>6.在mycat服务器上测试连接mysql</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SH">[root@mysql-master ~]<span class="hljs-comment"># mysql -uroot -p123456 -h 10.0.0.127</span><br>mysql&gt; SHOW DATABASES;<br>+----------+<br>| DATABASE |<br>+----------+<br>| TESTDB   |<br>+----------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure><h5 id="7-在mysql服务器测试"><a href="#7-在mysql服务器测试" class="headerlink" title="7.在mysql服务器测试"></a>7.在mysql服务器测试</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#此时已完成Mycat读写分离，客户端主机访问Mycat主机</span><br>[root@rhel ~]<span class="hljs-comment"># mysql -uroot -p123456  -h 10.0.0.127 --default_auth=mysql_native_password</span><br>mysql&gt; use TESTDB;<br><span class="hljs-comment">#进行查询，读操作实际访问从节点</span><br>MySQL&gt; select @@server_id;<br>+-------------+<br>| @@server_id |<br>+-------------+<br>|         131 |<br>+-------------+<br><span class="hljs-comment">#修改数据，读操作实际访问主节点，可以在/var/lib/mysql/master.log中查看到相应记录</span><br><span class="hljs-comment">#需要先开启通用日志，持续生效可修改配置文件</span><br>[root@cmysql-slave ~]<span class="hljs-variable">$mysql</span><br>mysql&gt; <span class="hljs-built_in">set</span> global  general_log=1;<br><br><br><span class="hljs-comment">#停止从节点，Mycat自动调度读请求至主节点</span><br>[root@mysql-slave ~]<span class="hljs-variable">$systemctl</span> stop mysqld<br>[root@rhel ~]<span class="hljs-comment"># mysql -uroot -p123456  -h 10.0.0.152 --default_auth=mysql_native_password</span><br>MySQL&gt; select @@server_id;<br>+-------------+<br>| @@server_id |<br>+-------------+<br>|         128 |<br>+-------------+<br><br><span class="hljs-comment">#从节点无法代替主节点</span><br></code></pre></td></tr></table></figure><h3 id="六-实现openvpn部署"><a href="#六-实现openvpn部署" class="headerlink" title="六.实现openvpn部署"></a>六.实现openvpn部署</h3><h5 id="实验环境-4"><a href="#实验环境-4" class="headerlink" title="实验环境"></a>实验环境</h5><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dns">总共三台机器：<br>openvpn-server(mysql8.<span class="hljs-number">0</span>):<br>eth<span class="hljs-number">0:10.0.0</span>.<span class="hljs-number">128</span> <br>eth<span class="hljs-number">1:192.168.10</span>.<span class="hljs-number">128</span><br>公网主机（mysql8.<span class="hljs-number">0</span>）：<br>eth<span class="hljs-number">0：10.0.0</span>.<span class="hljs-number">127</span><br>内网主机（mysql8.<span class="hljs-number">0</span>）：<br>eth<span class="hljs-number">0:192.168.10</span>.<span class="hljs-number">133</span><br></code></pre></td></tr></table></figure><h5 id="1-安装openvpn软件包并配置环境"><a href="#1-安装openvpn软件包并配置环境" class="headerlink" title="1.安装openvpn软件包并配置环境"></a>1.安装openvpn软件包并配置环境</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@openvpn-server network-scripts]<span class="hljs-comment">#yum -y install openvpn </span><br>[root@openvpn-server network-scripts]<span class="hljs-comment">#yum -y install easy-rsa #用来生成证书相关文件和颁布证书</span><br><br><span class="hljs-comment">#生成服务器端配置文件</span><br>[root@openvpn-server network-scripts]<span class="hljs-comment">#cp /usr/share/doc/openvpn/sample/sample-config-files/server.conf  /etc/openvpn/</span><br><span class="hljs-comment">#准备证书颁发相关文件</span><br>[root@openvpn-server network-scripts]<span class="hljs-comment">#cp -r /usr/share/easy-rsa/ /etc/openvpn/easy-rsa-server</span><br><span class="hljs-comment">#准备颁发证书相关配置变量的配置文件</span><br>[root@openvpn-server network-scripts]<span class="hljs-comment">#cp -r /usr/share/doc/easy-rsa/vars.example /etc/openvpn/easy-rsa-server/3/vars</span><br><span class="hljs-comment">#修改给CA和服务器颁发证书的有效期，适当加长</span><br>[root@openvpn-server network-scripts]<span class="hljs-comment">#vim /etc/openvpn/easy-rsa-server/3/vars</span><br>set_var EASYRSA_CA_EXPIRE       365000<span class="hljs-comment">#CA证书有效期，默认十年，建议改长</span><br>set_var EASYRSA_CERT_EXPIRE     8250<span class="hljs-comment">#服务器证书有效期，默认825天，建议改长</span><br><br>[root@openvpn-server network-scripts]<span class="hljs-comment">#tree /etc/openvpn/</span><br>/etc/openvpn/<br>├── client<br>├── easy-rsa-server<br>│   ├── 3 -&gt; 3.0.8<br>│   ├── 3.0 -&gt; 3.0.8<br>│   └── 3.0.8<br>│       ├── easyrsa<br>│       ├── openssl-easyrsa.cnf<br>│       ├── vars<br>│       └── x509-types<br>│           ├── ca<br>│           ├── client<br>│           ├── code-signing<br>│           ├── COMMON<br>│           ├── email<br>│           ├── kdc<br>│           ├── server<br>│           └── serverClient<br>├── server<br>└── server.conf<br><br>7 directories, 12 files<br></code></pre></td></tr></table></figure><h5 id="2-准备证书相关文件"><a href="#2-准备证书相关文件" class="headerlink" title="2.准备证书相关文件"></a>2.准备证书相关文件</h5><h6 id="1-脚本easyrsa帮助"><a href="#1-脚本easyrsa帮助" class="headerlink" title="(1).脚本easyrsa帮助"></a>(1).脚本easyrsa帮助</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@openvpn-server ~]<span class="hljs-comment">#cd /etc/openvpn/easy-rsa-server/3/</span><br>[root@openvpn-server 3]<span class="hljs-comment">#./easyrsa</span><br><br>Easy-RSA 3 usage and overview<br><br>USAGE: easyrsa [options] COMMAND [command-options]<br><br>A list of commands is shown below. To get detailed usage and <span class="hljs-built_in">help</span> <span class="hljs-keyword">for</span> a<br><span class="hljs-built_in">command</span>, run:<br>  ./easyrsa <span class="hljs-built_in">help</span> COMMAND<br><br>For a listing of options that can be supplied before the <span class="hljs-built_in">command</span>, use:<br>  ./easyrsa <span class="hljs-built_in">help</span> options<br><br>Here is the list of commands available with a short syntax reminder. Use the<br><span class="hljs-string">&#x27;help&#x27;</span> <span class="hljs-built_in">command</span> above to get full usage details.<br><br>  init-pki<br>  build-ca [ cmd-opts ]<br>  gen-dh<br>  gen-req &lt;filename_base&gt; [ cmd-opts ]<br>  sign-req &lt;<span class="hljs-built_in">type</span>&gt; &lt;filename_base&gt;<br>  build-client-full &lt;filename_base&gt; [ cmd-opts ]<br>  build-server-full &lt;filename_base&gt; [ cmd-opts ]<br>  revoke &lt;filename_base&gt; [cmd-opts]<br>  renew &lt;filename_base&gt; [cmd-opts]<br>  build-serverClient-full &lt;filename_base&gt; [ cmd-opts ]<br>  gen-crl<br>  update-db<br>  show-req &lt;filename_base&gt; [ cmd-opts ]<br>  show-cert &lt;filename_base&gt; [ cmd-opts ]<br>  show-ca [ cmd-opts ]<br>  import-req &lt;request_file_path&gt; &lt;short_basename&gt;<br>  export-p7 &lt;filename_base&gt; [ cmd-opts ]<br>  export-p8 &lt;filename_base&gt; [ cmd-opts ]<br>  export-p12 &lt;filename_base&gt; [ cmd-opts ]<br>  set-rsa-pass &lt;filename_base&gt; [ cmd-opts ]<br>  set-ec-pass &lt;filename_base&gt; [ cmd-opts ]<br>  upgrade &lt;<span class="hljs-built_in">type</span>&gt;<br></code></pre></td></tr></table></figure><h6 id="2-初始化PKI生成PKI相关目录和文件"><a href="#2-初始化PKI生成PKI相关目录和文件" class="headerlink" title="(2).初始化PKI生成PKI相关目录和文件"></a>(2).初始化PKI生成PKI相关目录和文件</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@openvpn-server 3]<span class="hljs-comment">#./easyrsa init-pki</span><br><br>init-pki complete; you may now create a CA or requests.<br>Your newly created PKI <span class="hljs-built_in">dir</span> is: /etc/openvpn/easy-rsa-server/3/pki<br>[root@openvpn-server 3]<span class="hljs-comment">#tree</span><br>.<br>├── easyrsa<br>├── openssl-easyrsa.cnf<br>├── pki <span class="hljs-comment">#生成新目录及相关文件</span><br>│   ├── private<br>│   └── reqs<br>├── vars<br>└── x509-types<br>    ├── ca<br>    ├── client<br>    ├── code-signing<br>    ├── COMMON<br>    ├── email<br>    ├── kdc<br>    ├── server<br>    └── serverClient<br><br>4 directories, 11 files<br></code></pre></td></tr></table></figure><h6 id="3-创建CA机构环境"><a href="#3-创建CA机构环境" class="headerlink" title="(3).创建CA机构环境"></a>(3).创建CA机构环境</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@openvpn-server 3]<span class="hljs-comment">#./easyrsa build-ca nopass #给CA颁发证书，nopass表示不给私钥增加密码</span><br><br>Note: using Easy-RSA configuration from: /etc/openvpn/easy-rsa-server/3.0.8/vars<br>Using SSL: openssl OpenSSL 1.1.1k  FIPS 25 Mar 2021<br>Generating RSA private key, 2048 bit long modulus (2 primes)<br>.................................+++++<br>...........................+++++<br>e is 65537 (0x010001)<br>You are about to be asked to enter information that will be incorporated<br>into your certificate request.<br>What you are about to enter is what is called a Distinguished Name or a DN.<br>There are quite a few fields but you can leave some blank<br>For some fields there will be a default value,<br>If you enter <span class="hljs-string">&#x27;.&#x27;</span>, the field will be left blank.<br>-----<br>Common Name (eg: your user, host, or server name) [Easy-RSA CA]:op^H^H<br><br>CA creation complete and you may now import and sign cert requests.<br>Your new CA certificate file <span class="hljs-keyword">for</span> publishing is at:<br>/etc/openvpn/easy-rsa-server/3/pki/ca.crt<br><br><br>[root@openvpn-server 3]<span class="hljs-comment">#tree </span><br>.<br>├── easyrsa<br>├── openssl-easyrsa.cnf<br>├── pki<br>│   ├── ca.crt <span class="hljs-comment">#生成ca自签名的证书的文件</span><br>│   ├── certs_by_serial<br>│   ├── index.txt<br>│   ├── index.txt.attr<br>│   ├── issued<br>│   ├── openssl-easyrsa.cnf<br>│   ├── private<br>│   │   └── ca.key<br>│   ├── renewed<br>│   │   ├── certs_by_serial<br>│   │   ├── private_by_serial<br>│   │   └── reqs_by_serial<br>│   ├── reqs<br>│   ├── revoked<br>│   │   ├── certs_by_serial<br>│   │   ├── private_by_serial<br>│   │   └── reqs_by_serial<br>│   └── serial<br>├── vars<br>└── x509-types<br>    ├── ca<br>    ├── client<br>    ├── code-signing<br>    ├── COMMON<br>    ├── email<br>    ├── kdc<br>    ├── server<br>    └── serverClient<br><br>14 directories, 17 files<br></code></pre></td></tr></table></figure><h6 id="4-创建并颁发服务器证书"><a href="#4-创建并颁发服务器证书" class="headerlink" title="(4).创建并颁发服务器证书"></a>(4).创建并颁发服务器证书</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#创建服务器证书申请文件，其中server是文件前缀</span><br>[root@openvpn-server 3]<span class="hljs-comment">#./easyrsa gen-req server nopass</span><br>[root@openvpn-server 3]<span class="hljs-comment">#tree </span><br>.<br>├── easyrsa<br>├── openssl-easyrsa.cnf<br>├── pki<br>│   ├── ca.crt<br>│   ├── certs_by_serial<br>│   ├── index.txt<br>│   ├── index.txt.attr<br>│   ├── issued<br>│   ├── openssl-easyrsa.cnf<br>│   ├── private<br>│   │   ├── ca.key<br>│   │   └── server.key <span class="hljs-comment">#生成私钥文件</span><br>│   ├── renewed<br>│   │   ├── certs_by_serial<br>│   │   ├── private_by_serial<br>│   │   └── reqs_by_serial<br>│   ├── reqs<br>│   │   └── server.req <span class="hljs-comment">#生成请求文件</span><br>│   ├── revoked<br>│   │   ├── certs_by_serial<br>│   │   ├── private_by_serial<br>│   │   └── reqs_by_serial<br>│   └── serial<br>├── vars<br>└── x509-types<br>    ├── ca<br>    ├── client<br>    ├── code-signing<br>    ├── COMMON<br>    ├── email<br>    ├── kdc<br>    ├── server<br>    └── serverClient<br><br>14 directories, 19 files<br><span class="hljs-comment">#颁发服务器证书，第一个server表示证书类型，第二个server表示请求文件名的前缀</span><br>[root@public-client 3]<span class="hljs-comment"># ./easyrsa sign server server</span><br><span class="hljs-comment">#验证结果</span><br>[root@openvpn-server 3]<span class="hljs-comment"># tree ./pki</span><br>./pki<br>├── ca.crt<br>├── certs_by_serial<br>│   └── F3F2210B468B539E5B4EFFD7B9AB9344.pem <span class="hljs-comment">#服务器证书文件</span><br>├── index.txt<br>├── index.txt.attr<br>├── index.txt.attr.old<br>├── index.txt.old<br>├── issued<br>│   └── server.crt  <span class="hljs-comment">#服务器证书文件</span><br>├── openssl-easyrsa.cnf<br>├── private<br>│   ├── ca.key<br>│   └── server.key<br>├── renewed<br>│   ├── certs_by_serial<br>│   ├── private_by_serial<br>│   └── reqs_by_serial<br>├── reqs<br>│   └── server.req<br>├── revoked<br>│   ├── certs_by_serial<br>│   ├── private_by_serial<br>│   └── reqs_by_serial<br>├── safessl-easyrsa.cnf<br>├── serial<br>└── serial.old<br><br>12 directories, 14 files<br></code></pre></td></tr></table></figure><h6 id="5-创建Diffie-Hellman密钥"><a href="#5-创建Diffie-Hellman密钥" class="headerlink" title="(5).创建Diffie-Hellman密钥"></a>(5).创建Diffie-Hellman密钥</h6><p>diffie-Hellman算法是Whitefield Diffie和Martin Hellman在1976年公布的一种秘钥交换算法，它是一种建立秘钥的方法，而不是加密方法，所以秘钥必须和其他一种加密算法结合使用。这种秘钥交换技术的目的在于使两个用户安全的交换一个秘钥一遍后面的报文加密。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@openvpn-server 3]<span class="hljs-comment"># ./easyrsa gen-dh</span><br></code></pre></td></tr></table></figure><h6 id="6-配置客户端环境"><a href="#6-配置客户端环境" class="headerlink" title="(6).配置客户端环境"></a>(6).配置客户端环境</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@openvpn-server 3]<span class="hljs-comment"># cp -a /usr/share/easy-rsa/ /etc/openvpn/easy-rsa-client</span><br>[root@openvpn-server 3]<span class="hljs-comment"># cd /etc/openvpn/easy-rsa-client/3</span><br><span class="hljs-comment">#生成客户端证书申请文件</span><br>[root@openvpn-server 3]<span class="hljs-comment"># ./easyrsa gen-req zzw nopass</span><br>[root@openvpn-server 3]<span class="hljs-comment"># tree</span><br>.<br>├── easyrsa<br>├── openssl-easyrsa.cnf<br>├── pki<br>│   ├── openssl-easyrsa.cnf<br>│   ├── private<br>│   │   └── zzw.key<br>│   ├── reqs<br>│   │   └── zzw.req <span class="hljs-comment">#客户端申请文件</span><br>│   └── safessl-easyrsa.cnf<br>└── x509-types<br>    ├── ca<br>    ├── client<br>    ├── code-signing<br>    ├── COMMON<br>    ├── email<br>    ├── kdc<br>    ├── server<br>    └── serverClient<br><br>4 directories, 14 files<br><span class="hljs-comment">#将客户端证书申请文件复制到CA的工作目录下</span><br>[root@openvpn-server 3]<span class="hljs-comment"># cd /etc/openvpn/easy-rsa-server/3</span><br>[root@openvpn-server 3]<span class="hljs-comment"># ./easyrsa import-req /etc/openvpn/easy-rsa-client/3/pki/reqs/zzw.req zzw</span><br>Note: using Easy-RSA configuration from: /etc/openvpn/easy-rsa-server/3.0.8/vars<br>Using SSL: openssl OpenSSL 1.1.1k  FIPS 25 Mar 2021<br><br>The request has been successfully imported with a short name of: zzw<br>You may now use this name to perform signing operations on this request.<br><span class="hljs-comment">#修改证书期限为180天</span><br>[root@openvpn-server 3]<span class="hljs-comment"># vim vars </span><br>set_var EASYRSA_CERT_EXPIRE     180<br><span class="hljs-comment">#颁发给客户端证书</span><br>[root@openvpn-server 3]<span class="hljs-comment"># ./easyrsa sign client zzw</span><br>[root@openvpn-server 3]<span class="hljs-comment"># tree ./pki</span><br>./pki<br>├── ca.crt<br>├── certs_by_serial<br>│   ├── CCE8210AB99BD0235AB0AA17D3C8ECAF.pem <span class="hljs-comment">#客户端证书</span><br>│   └── F3F2210B468B539E5B4EFFD7B9AB9344.pem <br>├── dh.pem<br>├── index.txt<br>├── index.txt.attr<br>├── index.txt.attr.old<br>├── index.txt.old<br>├── issued<br>│   ├── server.crt<br>│   └── zzw.crt <span class="hljs-comment">#客户端证书</span><br>├── openssl-easyrsa.cnf<br>├── private<br>│   ├── ca.key<br>│   └── server.key<br>├── renewed<br>│   ├── certs_by_serial<br>│   ├── private_by_serial<br>│   └── reqs_by_serial<br>├── reqs<br>│   ├── server.req<br>│   └── zzw.req<br>├── revoked<br>│   ├── certs_by_serial<br>│   ├── private_by_serial<br>│   └── reqs_by_serial<br>├── safessl-easyrsa.cnf<br>├── serial<br>└── serial.old<br><br>12 directories, 18 files<br></code></pre></td></tr></table></figure><h6 id="7-将服务器对应证书私钥放入服务器对应目录"><a href="#7-将服务器对应证书私钥放入服务器对应目录" class="headerlink" title="(7).将服务器对应证书私钥放入服务器对应目录"></a>(7).将服务器对应证书私钥放入服务器对应目录</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@openvpn-server 3]<span class="hljs-comment"># mkdir /etc/openvpn/certs; cp /etc/openvpn/easy-rsa-server/3/pki/ca.crt /etc/openvpn/certs/</span><br>[root@openvpn-server 3]<span class="hljs-comment"># cp  /etc/openvpn/easy-rsa-server/3/pki/issued/server.crt  /etc/openvpn/certs/</span><br>[root@openvpn-server 3]<span class="hljs-comment"># cp  /etc/openvpn/easy-rsa-server/3/pki/private/server.key  /etc/openvpn/certs/</span><br>[root@openvpn-server 3]<span class="hljs-comment"># cp  /etc/openvpn/easy-rsa-server/3/pki/dh.pem  /etc/openvpn/certs/</span><br>[root@openvpn-server 3]<span class="hljs-comment"># ll /etc/openvpn/certs/</span><br>total 20<br>-rw-------. 1 root root 1204 Nov  4 13:29 ca.crt<br>-rw-------. 1 root root  424 Nov  4 13:32 dh.pem<br>-rw-------. 1 root root 4608 Nov  4 13:30 server.crt<br>-rw-------. 1 root root 1704 Nov  4 13:31 server.key<br></code></pre></td></tr></table></figure><h6 id="8-将客户端私钥证书放到对应服务器目录"><a href="#8-将客户端私钥证书放到对应服务器目录" class="headerlink" title="(8).将客户端私钥证书放到对应服务器目录"></a>(8).将客户端私钥证书放到对应服务器目录</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@openvpn-server 3]<span class="hljs-comment"># mkdir /etc/openvpn/client/zzw;</span><br>[root@openvpn-server 3]<span class="hljs-comment"># cp /etc/openvpn/easy-rsa-server/3/pki/issued/zzw.crt /etc/openvpn/c</span><br>certs/  client/ <br>[root@openvpn-server 3]<span class="hljs-comment"># cp /etc/openvpn/easy-rsa-server/3/pki/issued/zzw.crt /etc/openvpn/client/zzw/              </span><br>[root@openvpn-server 3]<span class="hljs-comment"># cp /etc/openvpn/easy-rsa-server/3/pki/ca.crt /etc/openvpn/client/zzw/</span><br>[root@openvpn-server 3]<span class="hljs-comment"># cp /etc/openvpn/easy-rsa-client/3/pki/private/zzw.key /etc/openvpn/client/zzw/</span><br>[root@openvpn-server 3]<span class="hljs-comment"># ll /etc/openvpn/client/zzw/</span><br>total 16<br>-rw-------. 1 root root 1204 Nov  4 13:37 ca.crt<br>-rw-------. 1 root root 4485 Nov  4 13:37 zzw.crt<br>-rw-------. 1 root root 1704 Nov  4 13:38 zzw.key<br></code></pre></td></tr></table></figure><h5 id="3-准备openvpn服务器配置文件"><a href="#3-准备openvpn服务器配置文件" class="headerlink" title="3.准备openvpn服务器配置文件"></a>3.准备openvpn服务器配置文件</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@openvpn-server ~]<span class="hljs-comment"># vim server.conf </span><br>port 1194<br>proto tcp<br>dev tun<br>ca /etc/openvpn/certs/ca.crt<br>cert /etc/openvpn/certs/server.crt<br>key /etc/openvpn/certs/server.key  <span class="hljs-comment"># This file should be kept secret</span><br>ca /etc/openvpn/certs/ca.crt<br>cert /etc/openvpn/certs/server.crt<br>key /etc/openvpn/certs/server.key  <span class="hljs-comment"># This file should be kept secret</span><br>dh /etc/openvpn/certs/dh.pem<br>server 10.8.0.0 255.255.255.0<br>push <span class="hljs-string">&quot;route 192.168.10.0 255.255.255.0&quot;</span><br>keepalive 10 120<br>cipher AES-256-CBC<br>compress lz4-v2<br>push <span class="hljs-string">&quot;compress lz4-v2&quot;</span><br>max-clients 2048<br>user openvpn<br>group openvpn<br>status /var/log/openvpn/openvpn-status.log<br>log-append  /var/log/openvpn/openvpn.log<br>verb 3<br>mute 20<br><span class="hljs-comment">#创建日志目录并修改所有者属性</span><br>[root@openvpn-server ~]<span class="hljs-comment"># mkdir /var/log/openvpn</span><br>[root@openvpn-server ~]<span class="hljs-comment"># chown openvpn.  /var/log/openvpn/</span><br></code></pre></td></tr></table></figure><h5 id="4-启动VPN服务"><a href="#4-启动VPN服务" class="headerlink" title="4.启动VPN服务"></a>4.启动VPN服务</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#修改服务文件</span><br>[root@openvpn-server ~]<span class="hljs-comment"># vim /usr/lib/systemd/system/openvpn@.service </span><br>[Unit]<br>Description=OpenVPN Robust And Highly Flexible Tunneling Application On %I<br>After=network.target<br><br>[Service]<br>Type=notify<br>PrivateTmp=<span class="hljs-literal">true</span><br>ExecStart=/usr/sbin/openvpn --<span class="hljs-built_in">cd</span> /etc/openvpn/ --config %i.conf<br><br>[Install]<br>WantedBy=multi-user.target<br><span class="hljs-comment">#启动服务</span><br>[root@openvpn-server ~]<span class="hljs-comment"># systemctl enable --now openvpn@server</span><br>Created symlink /etc/systemd/system/multi-user.target.wants/openvpn@server.service → /usr/lib/systemd/system/openvpn@.service.<br><br></code></pre></td></tr></table></figure><h5 id="5-验证服务状态"><a href="#5-验证服务状态" class="headerlink" title="5.验证服务状态"></a>5.验证服务状态</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看端口</span><br>[root@openvpn-server ~]<span class="hljs-comment"># ss -ntl</span><br>State          Recv-Q          Send-Q                   Local Address:Port                    Peer Address:Port         Process                               <br>LISTEN         0               32                             0.0.0.0:1194                         0.0.0.0:*   <br><span class="hljs-comment">#查看ip</span><br>[root@openvpn-server ~]<span class="hljs-comment"># ip a</span><br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000<br>    <span class="hljs-built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>    inet 127.0.0.1/8 scope host lo<br>       valid_lft forever preferred_lft forever<br>    inet6 ::1/128 scope host <br>       valid_lft forever preferred_lft forever<br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether 00:0c:29:93:d4:f5 brd ff:ff:ff:ff:ff:ff<br>    inet 10.0.0.128/24 brd 10.0.0.255 scope global noprefixroute eth0<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::20c:29ff:fe93:d4f5/64 scope <span class="hljs-built_in">link</span> <br>       valid_lft forever preferred_lft forever<br>3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether 00:0c:29:93:d4:ff brd ff:ff:ff:ff:ff:ff<br>    inet 192.168.10.128/24 brd 192.168.10.255 scope global noprefixroute eth1<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::20c:29ff:fe93:d4ff/64 scope <span class="hljs-built_in">link</span> <br>       valid_lft forever preferred_lft forever<br>4: tun0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UNKNOWN group default qlen 100<br>    <span class="hljs-built_in">link</span>/none <br>    inet 10.8.0.1 peer 10.8.0.2/32 scope global tun0<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::64cf:6afe:7224:482f/64 scope <span class="hljs-built_in">link</span> stable-privacy <br>       valid_lft forever preferred_lft forever<br>     <br><span class="hljs-comment">#查看路由</span><br>[root@openvpn-server ~]<span class="hljs-comment"># route -n</span><br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         10.0.0.2        0.0.0.0         UG    100    0        0 eth0<br>0.0.0.0         192.168.10.1    0.0.0.0         UG    101    0        0 eth1<br>10.0.0.0        0.0.0.0         255.255.255.0   U     100    0        0 eth0<br>10.8.0.0        10.8.0.2        255.255.255.0   UG    0      0        0 tun0<br>10.8.0.2        0.0.0.0         255.255.255.255 UH    0      0        0 tun0<br>192.168.10.0    0.0.0.0         255.255.255.0   U     101    0        0 eth1<br><br></code></pre></td></tr></table></figure><h5 id="6-准备客户端配置文件"><a href="#6-准备客户端配置文件" class="headerlink" title="6.准备客户端配置文件"></a>6.准备客户端配置文件</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/openvpn/client/zzw/client.ovpn<br>client<br>dev tun<br>proto tcp<br>ca ca.crt<br>cert zzw.crt<br>key zzw.key  <span class="hljs-comment"># This file should be kept secret</span><br>remote 10.0.0.128 1194 <span class="hljs-comment">#填写地址或域名（最好写域名，防止ip地址变化）</span><br>cipher AES-256-CBC<br>compress lz4-v2<br>remote-cert-tls server<br>nobind<br>resolv-retry infinite<br>max-clients 2048<br>verb 3<br>mute 20<br></code></pre></td></tr></table></figure><h5 id="7-公网客户通过openvpn连接内网主机"><a href="#7-公网客户通过openvpn连接内网主机" class="headerlink" title="7.公网客户通过openvpn连接内网主机"></a>7.公网客户通过openvpn连接内网主机</h5><h6 id="1-安装openvpn客户端"><a href="#1-安装openvpn客户端" class="headerlink" title="(1).安装openvpn客户端"></a>(1).安装openvpn客户端</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@public-client ~]<span class="hljs-comment">#yum -y install openvpn</span><br></code></pre></td></tr></table></figure><h6 id="2-从服务器端下载客户端的公钥私钥和CA证书还有客户端配置文件"><a href="#2-从服务器端下载客户端的公钥私钥和CA证书还有客户端配置文件" class="headerlink" title="(2).从服务器端下载客户端的公钥私钥和CA证书还有客户端配置文件"></a>(2).从服务器端下载客户端的公钥私钥和CA证书还有客户端配置文件</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@public-client ~]<span class="hljs-comment">#scp 10.0.0.128:/etc/openvpn/client/zzw/*  /etc/openvpn/</span><br>root@10.0.0.128<span class="hljs-string">&#x27;s password: </span><br><span class="hljs-string">ca.crt                                                                                                100% 1204     1.5MB/s   00:00    </span><br><span class="hljs-string">client.ovpn                                                                                           100%  237   275.5KB/s   00:00    </span><br><span class="hljs-string">zzw.crt                                                                                               100% 4485     4.7MB/s   00:00    </span><br><span class="hljs-string">zzw.key                                                                                               100% 1704     1.7MB/s   00:00    </span><br><span class="hljs-string">[root@public-client ~]#ll /etc/openvpn/</span><br><span class="hljs-string">total 20</span><br><span class="hljs-string">-rw------- 1 root root    1204 Nov  4 14:55 ca.crt</span><br><span class="hljs-string">drwxr-x--- 2 root openvpn    6 Mar 18  2022 client</span><br><span class="hljs-string">-rw-r--r-- 1 root root     237 Nov  4 14:55 client.ovpn</span><br><span class="hljs-string">drwxr-x--- 2 root openvpn    6 Mar 18  2022 server</span><br><span class="hljs-string">-rw------- 1 root root    4485 Nov  4 14:55 zzw.crt</span><br><span class="hljs-string">-rw------- 1 root root    1704 Nov  4 14:55 zzw.key</span><br></code></pre></td></tr></table></figure><h6 id="3-启动openvpn客户端"><a href="#3-启动openvpn客户端" class="headerlink" title="(3).启动openvpn客户端"></a>(3).启动openvpn客户端</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@public-client ~]<span class="hljs-comment">#openvpn --daemon --cd /etc/openvpn --config client.ovpn --log-append /var/log/openvpn.log</span><br>--daemon <span class="hljs-comment">#以daemon方式启动</span><br>--<span class="hljs-built_in">cd</span> <span class="hljs-built_in">dir</span> <span class="hljs-comment">#配置文件目录</span><br>--config file <span class="hljs-comment">#客户端配置文件</span><br>--log-append file <span class="hljs-comment">#日志文件，若不存在会自动建立</span><br></code></pre></td></tr></table></figure><h6 id="4-在openvpn服务器端开启ip转发功能"><a href="#4-在openvpn服务器端开启ip转发功能" class="headerlink" title="(4).在openvpn服务器端开启ip转发功能"></a>(4).在openvpn服务器端开启ip转发功能</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#开启ip转发功能</span><br>[root@openvpn-server ~]<span class="hljs-comment"># echo net.ipv4.ip_forward=1 &gt;&gt;/etc/sysctl.conf </span><br>[root@openvpn-server ~]<span class="hljs-comment"># sysctl -p</span><br>net.ipv4.ip_forward = 1<br></code></pre></td></tr></table></figure><p>(5).在内网主机添加路由将目标地址为openvpn路由的下一跳都指向openvpn服务器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@private-client ~]<span class="hljs-comment"># ip route add 10.8.0.0/24 via 192.168.10.128</span><br></code></pre></td></tr></table></figure><p>(6).在公网客户端上访问内网主机</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@public-client ~]<span class="hljs-comment">#ping 192.168.10.133</span><br>PING 192.168.10.133 (192.168.10.133) 56(84) bytes of data.<br>64 bytes from 192.168.10.133: icmp_seq=1 ttl=63 time=0.714 ms<br>64 bytes from 192.168.10.133: icmp_seq=2 ttl=63 time=0.558 ms<br>64 bytes from 192.168.10.133: icmp_seq=3 ttl=63 time=0.684 ms<br>64 bytes from 192.168.10.133: icmp_seq=4 ttl=63 time=0.624 ms<br>64 bytes from 192.168.10.133: icmp_seq=5 ttl=63 time=0.752 ms<br>64 bytes from 192.168.10.133: icmp_seq=6 ttl=63 time=0.893 ms<br>64 bytes from 192.168.10.133: icmp_seq=7 ttl=63 time=0.591 ms<br>64 bytes from 192.168.10.133: icmp_seq=8 ttl=63 time=0.624 ms<br>64 bytes from 192.168.10.133: icmp_seq=9 ttl=63 time=0.548 ms<br>64 bytes from 192.168.10.133: icmp_seq=10 ttl=63 time=0.922 ms<br><span class="hljs-comment">#ssh连接登录内网主机</span><br>[root@public-client ~]<span class="hljs-comment">#ssh 192.168.10.133</span><br>Warning: Permanently added <span class="hljs-string">&#x27;192.168.10.133&#x27;</span> (ECDSA) to the list of known hosts.<br>root@192.168.10.133<span class="hljs-string">&#x27;s password: </span><br><span class="hljs-string">Last login: Fri Nov  4 09:59:49 2022 from 192.168.10.1</span><br><span class="hljs-string">[root@private-client ~]# ip a</span><br><span class="hljs-string">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="hljs-string">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="hljs-string">    inet 127.0.0.1/8 scope host lo</span><br><span class="hljs-string">       valid_lft forever preferred_lft forever</span><br><span class="hljs-string">    inet6 ::1/128 scope host </span><br><span class="hljs-string">       valid_lft forever preferred_lft forever</span><br><span class="hljs-string">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class="hljs-string">    link/ether 00:0c:29:5f:5a:19 brd ff:ff:ff:ff:ff:ff</span><br><span class="hljs-string">    inet 192.168.10.133/24 brd 192.168.10.255 scope global noprefixroute eth0</span><br><span class="hljs-string">       valid_lft forever preferred_lft forever</span><br><span class="hljs-string">    inet6 fe80::20c:29ff:fe5f:5a19/64 scope link </span><br><span class="hljs-string">       valid_lft forever preferred_lft forever</span><br></code></pre></td></tr></table></figure><p><img src="image-20221104151223446.png" alt="image-20221104151223446"></p><p>实验成功，通过openvpn的配置实现了公网客户端和内网的互通（peer to site）</p>]]></content>
    
    
    
    <tags>
      
      <tag>sql xtrabackup mysql主从复制 mycat读写分离 openvpn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第五周作业</title>
    <link href="/2022/09/23/%E7%AC%AC%E4%BA%94%E5%91%A8%E4%BD%9C%E4%B8%9A/"/>
    <url>/2022/09/23/%E7%AC%AC%E4%BA%94%E5%91%A8%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><span id="more"></span><h2 id="一-SUDO，PAM配置规范"><a href="#一-SUDO，PAM配置规范" class="headerlink" title="一.SUDO，PAM配置规范"></a>一.SUDO，PAM<u>配置规范</u></h2><h3 id="SUDO"><a href="#SUDO" class="headerlink" title="SUDO"></a>SUDO</h3><h4 id="1-sudo的应用目的以及功能"><a href="#1-sudo的应用目的以及功能" class="headerlink" title="1.sudo的应用目的以及功能"></a>1.sudo的应用目的以及功能</h4><h5 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h5><p>  Linux系统中，许多与系统配置有关的命令都被设为只能由root执行，保证了系统配置层面的安全性。但大型服务器的实际使用过程中，root并不能独自完成所有的配置维护工作，比如增加新用户、重启等等。这就需要root将原本只能由他执行的命令授权给特定的管理用户执行，于是就出现了sudo命令以及对应的root配置命令visudo</p><h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><p>  sudo命令加在命令行最前。当用户拥有root赋予的对应sudo权限后，就能通过sudo执行原本只能由root执行的命令，执行过程中拥有root权限。</p><h4 id="2-sudo权限赋予机制"><a href="#2-sudo权限赋予机制" class="headerlink" title="2.sudo权限赋予机制"></a>2.sudo权限赋予机制</h4><p>  sudo命令的授权配置记录在/etc/sudoers文件和/etc/sudoers.d目录中（目录中以文件形式记录权限赋予，格式同sudoers，下不讨论）。root通过visudo命令配置对用户的授权命令（也可以对组赋予），配置立即生效。用户可以通过sudo -l命令查看自己获得的sudo权限，取得授权后使用sudo + <command>命令执行。</p><h4 id="3-sudo权限赋予完整过程实现"><a href="#3-sudo权限赋予完整过程实现" class="headerlink" title="3.sudo权限赋予完整过程实现"></a>3.sudo权限赋予完整过程实现</h4><p>visudo<br> 首先切换到root用户，执行命令visudo</p><p> 这时部分可能会默认使用nano文本编辑器打开文件，如果还是习惯用vim，可以用</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">export EDITOR=vim<br></code></pre></td></tr></table></figure><h4 id="sudoers文件格式："><a href="#sudoers文件格式：" class="headerlink" title="sudoers文件格式："></a>sudoers文件格式：</h4><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment">#</span><br><span class="hljs-comment"># This file MUST be edited with the &#x27;visudo&#x27; command as root.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Please consider adding local content in /etc/sudoers.d/ instead of</span><br><span class="hljs-comment"># directly modifying this file.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># See the man page for details on how to write a sudoers file.</span><br><span class="hljs-comment">#</span><br>Defaults        env_reset<br>Defaults        mail_badpass<br>Defaults        secure_path=<span class="hljs-string">&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin&quot;</span><br><br><span class="hljs-comment"># Host alias specification</span><br><br><span class="hljs-comment"># User alias specification</span><br><br><span class="hljs-comment"># Cmnd alias specification</span><br><br><span class="hljs-comment"># User privilege specification</span><br>root    <span class="hljs-literal">ALL</span>=(<span class="hljs-literal">ALL</span>:<span class="hljs-literal">ALL</span>) <span class="hljs-literal">ALL</span><br><br><span class="hljs-comment"># Members of the admin group may gain root privileges</span><br>%<span class="hljs-literal">admin</span> <span class="hljs-literal">ALL</span>=(<span class="hljs-literal">ALL</span>) <span class="hljs-literal">ALL</span><br><br><span class="hljs-comment"># Allow members of group sudo to execute any command</span><br>%sudo   <span class="hljs-literal">ALL</span>=(<span class="hljs-literal">ALL</span>:<span class="hljs-literal">ALL</span>) <span class="hljs-literal">ALL</span><br><br><span class="hljs-comment"># See sudoers(5) for more information on &quot;#include&quot; directives:</span><br><br><span class="hljs-comment">#includedir /etc/sudoers.d</span><br></code></pre></td></tr></table></figure><p>用户权限设置，格式如下：</p><p>root    ALL=(ALL:ALL) ALL<br>&lt;授予用户名&gt; &lt;受管理的IP地址/网段&gt;=（&lt;转化目标身份用户&gt;:&lt;转化目标身份组&gt;） &lt;命令&gt; </p><p>注意：受管理的IP地址不是远程访问的客户端地址，而是授权给用户管理的主机IP地址</p><p>该参数一般在服务器作为域控制管理器时需要另外设置，一般写ALL即可</p><p>括号内两个参数可以空缺，默认为ALL</p><p>命令后也可加参数，具体见注意事项</p><p>sudo权限配置文件存放路径设置，也可设置多个权限配置文件目录，格式同样例</p><h4 id="sudo查看权限及使用"><a href="#sudo查看权限及使用" class="headerlink" title="sudo查看权限及使用"></a>sudo查看权限及使用</h4><p> 用户使用sudo -l命令查看自己拥有的权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br></code></pre></td></tr></table></figure><p> 第一次查看需要输入密码以确认身份</p><p> 使用时只要在命令行前加sudo 即可</p><p>4.注意事项<br>为了安全，sudoers文件一般建议使用visudo命令打开（拥有查错警告等保护措施），而不是直接用vim编辑</p><p>权限赋予时对于特定命令若不加参数，则认为被赋权用户拥有添加所有参数的权限，若对命令指定参数，则只能执行只带该参数的命令。例如：</p><p>test    ALL=(ALL:ALL) shutdown #该授权允许test用户执行带任何参数的shutdown命令<br>test    ALL=(ALL:ALL) shutdown -r now #该授权仅允许test用户执行立即重启命令<br>test    ALL=(ALL:ALL) ALL #该授权允许test用户执行任何命令<br>1<br>2<br>3<br>所以如果命令简略。则授权较大；命令详细，则授权较小</p><p>在第一次开机配置第一位非root用户时，系统将该用户加入进名为sudo的附加组，而在sudoers配置文件中，初始就有对组sudo的授权<br>所以初始配置的用户拥有执行任何命令的sudo权限，而新加入的用户未配置前没有任何sudo权限</p><h3 id="PAM"><a href="#PAM" class="headerlink" title="PAM"></a>PAM</h3><h4 id="一、pam简介"><a href="#一、pam简介" class="headerlink" title="一、pam简介"></a>一、pam简介</h4><p>Linux-PAM(linux可插入认证模块)是一套共享库，使本地系统管理员可以随意选择程序的认证方式。换句话说，不用重新编译一个包含PAM功能的应用程序，就可以改变它使用的认证机制。这种方式下,就算升级本地认证机制，也不用修改程序。PAM使用配置/etc/pam.d/下的文件，来管理对程序的认证方式。应用程序调用相应的配置文件，从而调用本地的认证模块。模块放置在/lib/security下,以加载动态库的形式进，像我们使用su命令时，系统会提示你输入root用户的密码。这就是su命令通过调用PAM模块实现的。</p><h4 id="二、PAM的配置文件介绍"><a href="#二、PAM的配置文件介绍" class="headerlink" title="二、PAM的配置文件介绍"></a>二、PAM的配置文件介绍</h4><p>PAM配置文件写在/etc/pam.conf文件中<br>保存在 /etc/pam.d/下<br>内容如下图：</p><p><img src="image-20220923102746137.png" alt="image-20220923102746137"></p><p>第一列代表模块类型<br>第二列代表控制标记<br>第三列代表模块名称<br>第四列代表模块参数</p><h4 id="三、PAM模块类型"><a href="#三、PAM模块类型" class="headerlink" title="三、PAM模块类型"></a>三、PAM模块类型</h4><p>Linux-PAM有四种模块类型,分别代表四种不同的任务，它们是：认证管理(auth)，账号管理(account)，会话管理(session)和密码(password)管理，一个类型可能有多行，它们按顺序依次由PAM模块调用。</p><p>auth：用来对用户的身份进行识别。如：提示用户输入密码，或判断用户是否为root等。<br>account：对帐号的各项属性进行检查。如：是否允许登录，是否达到最大用户数，或是root用户是否允许在这个终端登录等。<br>session：这个模块用来定义用户登录前的，及用户退出后所要进行的操作。如：登录连接信息，用户数据的打开与关闭，挂载文件系统等。<br>password：使用用户信息来更新。如：修改用户密码。</p><h2 id="二-chrony搭建私有ntp服务"><a href="#二-chrony搭建私有ntp服务" class="headerlink" title="二.chrony搭建私有ntp服务"></a>二.chrony搭建私有ntp服务</h2><p><img src="a1d5bd55f37f43fb92e445f985e7bc23.png" alt="a1d5bd55f37f43fb92e445f985e7bc23"></p><h4 id="服务器端配置"><a href="#服务器端配置" class="headerlink" title="服务器端配置"></a>服务器端配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@rocky86 ~]#vim /etc/chrony.conf <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Use public servers from the pool.ntp.org project.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Please consider joining the pool (http://www.pool.ntp.org/join.html).</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">pool 2.pool.ntp.org iburst</span><br>server ntp.aliyun.com iburst #和阿里云的服务器同步<br>server time1.cloud.tencent.com iburst #和腾讯云同步<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Record the rate at <span class="hljs-built_in">which</span> the system clock gains/losses time.</span><br>driftfile /var/lib/chrony/drift<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Allow the system clock to be stepped <span class="hljs-keyword">in</span> the first three updates</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">if</span> its offset is larger than 1 second.</span><br>makestep 1.0 3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Enable kernel synchronization of the real-time clock (RTC).</span><br>rtcsync<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Enable hardware timestamping on all interfaces that support it.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">hwtimestamp *</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Increase the minimum number of selectable sources required to adjust</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">the system clock.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">minsources 2</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Allow NTP client access from <span class="hljs-built_in">local</span> network.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">allow 192.168.0.0/16</span><br>allow 10.0.0.0/24 #允许10.0.0.0网段的主机同步本服务器<br></code></pre></td></tr></table></figure><h4 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ubantu2004:~# vim /etc/chrony/chrony.conf <br>server 10.0.0.127 iburst<br>root@ubantu2004:~# systemctl restart chrony<br>root@ubantu2004:~# chronyc sources -v<br>210 Number of sources = 1<br><br>  .-- Source mode  &#x27;^&#x27; = server, &#x27;=&#x27; = peer, &#x27;#&#x27; = local clock.<br> / .- Source state &#x27;*&#x27; = current synced, &#x27;+&#x27; = combined , &#x27;-&#x27; = not combined,<br>| /   &#x27;?&#x27; = unreachable, &#x27;x&#x27; = time may be in error, &#x27;~&#x27; = time too variable.<br>||                                                 .- xxxx [ yyyy ] +/- zzzz<br>||      Reachability register (octal) -.           |  xxxx = adjusted offset,<br>||      Log2(Polling interval) --.      |          |  yyyy = measured offset,<br>||                                \     |          |  zzzz = estimated error.<br>||                                 |    |           \<br>MS Name/IP address         Stratum Poll Reach LastRx Last sample               <br>===============================================================================<br>^* 10.0.0.127                    3   6    17    21  +9901ns[ +116us] +/-   22ms<br></code></pre></td></tr></table></figure><h2 id="三-智能CDN"><a href="#三-智能CDN" class="headerlink" title="三.智能CDN"></a>三.智能CDN</h2><p><img src="006b80218a2e4b7c9ced7a4d1d5b6248.png" alt="006b80218a2e4b7c9ced7a4d1d5b6248"></p><h4 id="CDN基本原理"><a href="#CDN基本原理" class="headerlink" title="CDN基本原理"></a>CDN基本原理</h4><p>CDN的基本原理是在用户访问相对集中的地区和网络设置一些缓存服务器。当用户访问网站时，利用全局的负载均衡技术将用户的访问指向距离最近的缓存服务器，由缓存服务器代替源站响应用户的访问请求。这样一方面减轻了源站服务器的工作压力，另一方面使用户可就近取得所需内容，解决inter网络拥挤的的状况，提高用户访问网站的响应速度。</p><h4 id="CDN的优点"><a href="#CDN的优点" class="headerlink" title="CDN的优点"></a>CDN的优点</h4><p>本地cache加速，提高了企业站点的访问速度（尤其含有大量图片和静态页面站点）</p><p>跨运营商的网络加速，保证不同网络的用户都能得到良好的访问质量</p><p>远程访问用户权限根据DNS负载均衡技术智能自动选择cache服务器</p><p>自动生成服务器的远程Mirror（镜像）cache服务器，远程用户访问时从cache服务器上读取数据，减少远程访问的带宽、分担网络流量、减轻源站点web服务器负载等功能</p><p>广泛分布的CDN节点加上节点之间的智能冗余机制，可以有效预防黑客入侵</p><h2 id="四-智能CDN实现"><a href="#四-智能CDN实现" class="headerlink" title="四.智能CDN实现"></a>四.智能CDN实现</h2><h4 id="利用view实现智能DNS"><a href="#利用view实现智能DNS" class="headerlink" title="利用view实现智能DNS"></a><strong>利用view实现智能DNS</strong></h4><blockquote><p>实验目的：搭建DNS主从服务器架构，实现DNS服务冗余</p></blockquote><h4 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a><strong>前提准备</strong></h4><blockquote><p>关闭SElinux</p><p>关闭防火墙</p><p>时间统计</p></blockquote><h4 id="主DNS服务端配置文件实现view"><a href="#主DNS服务端配置文件实现view" class="headerlink" title="主DNS服务端配置文件实现view"></a><strong>主DNS服务端配置文件实现view</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install bind-y<br><br>\# 配置文件<br><br>vim /etc/named.conf <br><span class="hljs-meta prompt_">#</span><span class="language-bash">在文件最前面加下面行</span><br>acl beijingnet &#123;<br>    10.0.0.0/24;<br>&#125;;<br> <br>acl shanghainet &#123;<br>    176.16.0.0/16;<br>&#125;;<br> <br>acl othernet &#123;<br>    any;<br>&#125;;<br> <br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注释掉下面两行</span><br>// listen-on port 53 &#123; 127.0.01; &#125;;<br>// allow-query       &#123; localhost; &#125;;<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">其他略</span><br> <br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建view</span><br>view beijingview &#123;<br>    match-clients  &#123;beijingnet; &#125;;<br>    include &quot;/etc/named.rfc1912.zones.bj&quot;;<br>&#125;;<br>view shanghaiview &#123;<br>    match-clients  &#123;shanghainet; &#125;;<br>    include &quot;/etc/named.rfc1912.zones.sh&quot;;<br>&#125;;<br>view otherview &#123;<br>    match-clients  &#123;othernet; &#125;;<br>    include &quot;/etc/named.rfc1912.zones.other&quot;;<br>&#125;;<br>include &quot;/etc/named.root.key&quot;;<br></code></pre></td></tr></table></figure><h4 id="实现区域配置文件（以北京为例）"><a href="#实现区域配置文件（以北京为例）" class="headerlink" title="实现区域配置文件（以北京为例）"></a><strong>实现区域配置文件（以北京为例）</strong></h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs abnf">vim /etc/named.rfc1912.zones.bj<br>zone<span class="hljs-string">&quot;.&quot;</span> IN &#123;<br>    type hint<span class="hljs-comment">;</span><br>    file <span class="hljs-string">&quot;named.ca&quot;</span><span class="hljs-comment">;</span><br>&#125;<span class="hljs-comment">;</span><br>zone<span class="hljs-string">&quot;magedu.org&quot;</span> &#123;<br>    type master<span class="hljs-comment">;</span><br>    file <span class="hljs-string">&quot;magedu.org.zone.bj&quot;</span><span class="hljs-comment">;</span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>修改所属组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">chgrp named /etc/named.rfc1912.zones.bj<br><br> chgrp named /etc/named.rfc1912.zones.sh<br><br> chgrp named /etc/named.rfc1912.zones.other<br></code></pre></td></tr></table></figure><h4 id="创建区域数据库文件"><a href="#创建区域数据库文件" class="headerlink" title="创建区域数据库文件"></a><strong>创建区域数据库文件</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /var/named/magedu.org.zone.bj <br><span class="hljs-meta prompt_">$</span><span class="language-bash">TTL 1D</span><br>@   IN SOA master  admain.magedu.org. ( 2 1H 20M 1D 1D )<br>        NS master<br>master A   10.0.0.127<br>websrv    A   10.0.0.127<br>www    CNAME    websrv<br></code></pre></td></tr></table></figure><h4 id="实现位于不同区域的三个web服务器"><a href="#实现位于不同区域的三个web服务器" class="headerlink" title="实现位于不同区域的三个web服务器"></a>实现位于不同区域的三个web服务器</h4><p><img src="image-20220925101813614.png" alt="image-20220925101813614"></p><h4 id="客户端测试"><a href="#客户端测试" class="headerlink" title="客户端测试"></a>客户端测试</h4><p><img src="image-20220925101832750.png" alt="image-20220925101832750"></p><h2 id="五-解释DNS解析流程"><a href="#五-解释DNS解析流程" class="headerlink" title="五.解释DNS解析流程"></a>五.解释DNS解析流程</h2><p><img src="image-20220925102059443.png" alt="image-20220925102059443"></p><h4 id="DNS解析流程"><a href="#DNS解析流程" class="headerlink" title="DNS解析流程"></a><strong>DNS解析流程</strong></h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.客户端提出域名解析请求，并将请求发送给本地域名服务器<br><br><span class="hljs-attribute">2</span>.本地域名服务器收到请求后，首先查询本地缓存，如果有这条记录，则本地域名服务器直接返回查询结果<br><br><span class="hljs-attribute">3</span>.如果本地缓存没有记录，则本地域名服务器直接向根域名服务器发送请求，然后根域名服务器返回域的主域名（根的子域）的本地域名服务器。服务器的地址<br><br><span class="hljs-attribute">4</span>.本地服务器向上一步返回的域名服务器发送请求后，然后接受请求的服务器查询自己的缓存，如果没有该记录，则返回相关下级域名服务器端的地址<br><br><span class="hljs-attribute">5</span>.重复地<span class="hljs-number">4</span>条，直到找到正确的记录<br><br><span class="hljs-attribute">6</span>.本地域名服务器将返回的结果保存到缓存中以备下次使用，并将结果返回给客户端<br><br></code></pre></td></tr></table></figure><h5 id="递归查询"><a href="#递归查询" class="headerlink" title="递归查询"></a>递归查询</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">是指DNS服务器在收到用户发送的请求时，必须向用户返回一个准确的查询结果。如果DNS服务器本地没有存储与之对应的信息，则该服务器需要询问其他服务器，并将返回的查询结果提交给用户。<br></code></pre></td></tr></table></figure><h5 id="迭代查询"><a href="#迭代查询" class="headerlink" title="迭代查询"></a>迭代查询</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">是指DNS服务器在收到用户发送的请求时，并不直接回复查询结果，而是告诉另一台服务器的地址，用户再向这台DNS服务器提交请求，这样依次反复，直到返回查询结果。<br></code></pre></td></tr></table></figure><h5 id="DNS缓存"><a href="#DNS缓存" class="headerlink" title="DNS缓存"></a>DNS缓存</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">DNS缓存是将数据存储在靠近发起请求的客户端的位置，也可以说DNS数据是可以缓存在任意位置，最终目的是在此减少递归查询过程，可以提高用户请求响应速度<br></code></pre></td></tr></table></figure><h2 id="六-iptables-5表5链解释"><a href="#六-iptables-5表5链解释" class="headerlink" title="六. iptables 5表5链解释"></a>六. iptables 5表5链解释</h2><p><img src="image-20220925102358531.png" alt="image-20220925102358531"></p><h5 id="5表：filter、nat、mangle、raw、security"><a href="#5表：filter、nat、mangle、raw、security" class="headerlink" title="5表：filter、nat、mangle、raw、security"></a>5表：filter、nat、mangle、raw、security</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">filter</span>：过滤规则表，默认表，使用最广泛<br><br>nat：地址转换规则表<br><br>mangle：修改数据标记位规则表<br><br>raw：关闭/启用的链接跟踪机制，加快封包穿越防火墙的速度<br><br><span class="hljs-keyword">security</span>：用于强制访问控制（MAC）网络规则由linux安全模块（selinux）实现<br></code></pre></td></tr></table></figure><h5 id="5链：INPUT、OUTPUT、FORWARD、PREROUTING、POSTROUTING"><a href="#5链：INPUT、OUTPUT、FORWARD、PREROUTING、POSTROUTING" class="headerlink" title="5链：INPUT、OUTPUT、FORWARD、PREROUTING、POSTROUTING"></a>5链：INPUT、OUTPUT、FORWARD、PREROUTING、POSTROUTING</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">INPUT</span>：进来的数据包应用此规则链中的策略（包含：<span class="hljs-attribute">filter</span>、mangle）<br><br>OUTPUT：外出的数据包应用此规则链的策略（包含：<span class="hljs-attribute">filter</span>、nat、mangle、raw）<br><br>FORWARD：转发数据包时应用此规则链中的策略（包含：<span class="hljs-attribute">filter</span>、mangle）<br><br>PREROUTING：对数据包作路由选择前应用此链中的规则（包含：nat、mangle、raw）<br><br>POSTROUTING：对数据包作路由选择后应用此链中的规则（包含：nat、mangle、raw)<br></code></pre></td></tr></table></figure><h5 id="优先级有高到低的顺序为："><a href="#优先级有高到低的顺序为：" class="headerlink" title="优先级有高到低的顺序为："></a><strong>优先级有高到低的顺序为：</strong></h5><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">security</span> --&gt;</span> <span class="hljs-function"><span class="hljs-title">raw</span> --&gt;</span> <span class="hljs-function"><span class="hljs-title">mangle</span> --&gt;</span> <span class="hljs-function"><span class="hljs-title">nat</span> --&gt;</span> filter<br></code></pre></td></tr></table></figure><h2 id="七-iptables-firewalld-nftable-实现主机防火墙。5000-6000端口仅192-168-0-0-24网段内的主机访问"><a href="#七-iptables-firewalld-nftable-实现主机防火墙。5000-6000端口仅192-168-0-0-24网段内的主机访问" class="headerlink" title="七.iptables/firewalld/nftable 实现主机防火墙。5000-6000端口仅192.168.0.0/24网段内的主机访问"></a>七.iptables/firewalld/nftable 实现主机防火墙。5000-6000端口仅192.168.0.0/24网段内的主机访问</h2><h5 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">iptables -A INPUT  ! -s 192.168.0.0/24  -p tcp -m multiport --dports 5000:6000 -j REJECT<br> <br> iptables -nvL --line-numbers<br>Chain INPUT (policy ACCEPT 0 packets, 0 bytes)<br>num   pkts bytes target     prot opt in     out     source               destination<br>1        2   112 REJECT     tcp  --  *      *      !192.168.0.0/24         0.0.0.0/0            multiport dports 5000:6000 reject-with icmp-port-unreachable<br> <br>Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)<br>num   pkts bytes target     prot opt in     out     source               destination<br> <br>Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)<br>num   pkts bytes target     prot opt in     out     source               destination<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">永久保存规则</span><br>yum -y install iptables-service<br>iptables-save &gt; /etc/sysconfig/iptables<br>systemctl enable iptables.service <br>systemctl mask firewalld.service nftables.service<br><br></code></pre></td></tr></table></figure><h5 id="firewalld"><a href="#firewalld" class="headerlink" title="firewalld"></a>firewalld</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">systemctl</span> start firewalld<br><span class="hljs-attribute">firewall</span>-cmd --permanent --zone=public --add-rich-rule=&#x27;rule family=ipv4 source address=<span class="hljs-number">192.168.0.0</span>/<span class="hljs-number">24</span> port port=<span class="hljs-number">5000</span>-<span class="hljs-number">6000</span>  accept&#x27;<br><br></code></pre></td></tr></table></figure><h5 id="nft"><a href="#nft" class="headerlink" title="nft"></a>nft</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">nft list ruleset <br>nft <span class="hljs-keyword">add</span> <span class="hljs-keyword">table</span> <span class="hljs-type">inet</span> test_table<br>nft <span class="hljs-keyword">add</span> chain <span class="hljs-type">inet</span> test_table test_filter_input_chain &#123; <span class="hljs-keyword">type</span> <span class="hljs-keyword">filter</span> hook <span class="hljs-keyword">input</span> priority <span class="hljs-number">0</span> \; &#125;<br>nft <span class="hljs-keyword">add</span> <span class="hljs-keyword">rule</span> <span class="hljs-type">inet</span> test_table test_filter_input_chain handle <span class="hljs-number">0</span> ip saddr != <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span>  dport &#123;<span class="hljs-number">5000</span><span class="hljs-number">-6000</span>&#125; reject<br></code></pre></td></tr></table></figure><h2 id="八、mysql的各发行版有哪些-？"><a href="#八、mysql的各发行版有哪些-？" class="headerlink" title="八、mysql的各发行版有哪些 ？"></a>八、mysql的各发行版有哪些 ？</h2><p><strong>MySQL 常见的发行版本</strong><br>MySQL 官方版本（社区版、企业版）<br>Percona MySQL：在 MySQL 官方发行版上进行二次开发<br>MariaDB<br><strong>各个发行版本之间的区别和优缺点</strong></p><p><img src="image-20220925122505351.png" alt="image-20220925122505351"></p><h2 id="九、mysql索引的作用"><a href="#九、mysql索引的作用" class="headerlink" title="九、mysql索引的作用"></a>九、mysql索引的作用</h2><h5 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h5><p>创建索引可以大幅提高系统性能，帮助用户提高查询的速度；<br>通过索引的唯一性，可以保证数据库表中的每一行数据的唯一性；<br>可以加速表与表之间的链接；<br>降低查询中分组和排序的时间。<br>当然了，没有任何事情是完美的，索引也是如此，尽管索引好处非常多，但是其也有局限性合理性以及片面性。</p><h5 id="索引的缺点"><a href="#索引的缺点" class="headerlink" title="索引的缺点"></a>索引的缺点</h5><p>索引的存储需要占用磁盘空间；<br>当数据的量非常巨大时，索引的创建和维护所耗费的时间也是相当大的；<br>当每次执行CRU操作时，索引也需要动态维护，降低了数据的维护速度。</p><h2 id="十、mysql-btree索引的原理"><a href="#十、mysql-btree索引的原理" class="headerlink" title="十、mysql btree索引的原理"></a>十、mysql btree索引的原理</h2><p><img src="image-20220925122554023.png" alt="image-20220925122554023"></p><p>B+ 树是一种树数据结构，是一个n叉排序树，每个节点通常有多个孩子，一棵B+树包含根节点、内部节点和叶子节点。 </p><p>B-Tree<br>为了描述B-Tree，首先定义一条数据记录为一个二元组[key, data]，key为记录的键值，对于不同数据记录，key是互不相同的；data为数据记录除key外的数据。那么B-Tree是满足下列条件的数据结构：</p><p>d为大于1的一个正整数，称为B-Tree的度。<br>h为一个正整数，称为B-Tree的高度。<br>每个非叶子节点由n-1个key和n个指针组成，其中d&lt;=n&lt;=2d。<br>每个叶子节点最少包含一个key和两个指针，最多包含2d-1个key和2d个指针，叶节点的指针均为null 。<br>所有叶节点具有相同的深度，等于树高h。<br>key和指针互相间隔，节点两端是指针。<br>一个节点中的key从左到右非递减排列。<br>所有节点组成树结构。<br>每个指针要么为null，要么指向另外一个节点。<br>如果某个指针在节点node最左边且不为null，则其指向节点的所有key小于v(key1)v(key1)，其中v(key1)v(key1)为node的第一个key的值。<br>如果某个指针在节点node最右边且不为null，则其指向节点的所有key大于v(keym)v(keym)，其中v(keym)v(keym)为node的最后一个key的值。<br>如果某个指针在节点node的左右相邻key分别是keyikeyi和keyi+1keyi+1且不为null，则其指向节点的所有key小于v(keyi+1)v(keyi+1)且大于v(keyi)v(keyi)。</p><h2 id="十一、mysql安全加固"><a href="#十一、mysql安全加固" class="headerlink" title="十一、mysql安全加固"></a>十一、mysql安全加固</h2><p><strong>相关措施</strong></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xquery">配置密码复杂度<br><br>配置密码过期策略<br><br>限制mysql多次登录失败重试时间<br><br>禁<span class="hljs-built_in">止root</span>账号登录<br><br>禁止空口令登录<br><br>根据用户的业务需要，配置其所需的最小权限<br><br>删除匿名账号<br><br><span class="hljs-built_in">除root</span>账号外，任何用户不应有mysql库user表的存取权限<br></code></pre></td></tr></table></figure><p><strong>执行安全加固脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">安装完mysql-server 会提示可以运行mysql_secure_installation。运行mysql_secure_installation会执行几个设置：<br>为root用户设置密码<br>删除匿名账号<br>取消root用户远程登录<br>删除<span class="hljs-built_in">test</span>库和对<span class="hljs-built_in">test</span>库的访问权限<br>刷新授权表使修改生效<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SUDO，PAM配置，chrony，ntp，智能CDN，DNS，iptables，firewalld，nft，MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第四周作业</title>
    <link href="/2022/08/30/%E7%AC%AC%E5%9B%9B%E5%91%A8%E4%BD%9C%E4%B8%9A/"/>
    <url>/2022/08/30/%E7%AC%AC%E5%9B%9B%E5%91%A8%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><span id="more"></span><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><h4 id="一次性任务at命令"><a href="#一次性任务at命令" class="headerlink" title="一次性任务at命令"></a>一次性任务at命令</h4><p>*来自at包，依赖atd服务</p><p>*at队列存放在/var/spool/at目录，Ubantu存放在/var/spool/cron/atjobs目录中</p><p>*执行任务是PATH变量的值和当前定义任务的用户身份一致</p><h5 id="at用法"><a href="#at用法" class="headerlink" title="at用法"></a>at用法</h5><figure class="highlight prolog"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs prolog">#at -h<br><span class="hljs-symbol">Usage</span>: at [-<span class="hljs-symbol">V</span>] [-q x] [-f file] [-mMlbv] timespec ...<br>       at [-<span class="hljs-symbol">V</span>] [-q x] [-f file] [-mMlbv] -t time<br>       at -c job ...<br>       atq [-<span class="hljs-symbol">V</span>] [-q x]<br>       at [ -rd ] job ...<br>       atrm [-<span class="hljs-symbol">V</span>] job ...<br>       batch<br></code></pre></td></tr></table></figure><h5 id="at使用范例"><a href="#at使用范例" class="headerlink" title="at使用范例"></a>at使用范例</h5><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">echo</span> “touch a.txt&quot; |<span class="hljs-built_in">at</span> <span class="hljs-number">14</span>:<span class="hljs-number">00</span> <span class="hljs-number">2022</span>-<span class="hljs-number">08</span>-<span class="hljs-number">30</span> #在<span class="hljs-number">2022</span>-<span class="hljs-number">08</span>-<span class="hljs-number">30</span>下午<span class="hljs-number">2</span>点创建a.txt文本文件<br><br><span class="hljs-built_in">at</span> noon#交互式执行，在中午执行<span class="hljs-built_in">ping</span>命令，并将结果重定向至<span class="hljs-built_in">at</span>.txt<br><span class="hljs-function">warning: <span class="hljs-title">commands</span> <span class="hljs-title">will</span> <span class="hljs-title">be</span> <span class="hljs-title">executed</span> <span class="hljs-title">using</span> /<span class="hljs-title">bin</span>/<span class="hljs-title">sh</span></span><br><span class="hljs-function"><span class="hljs-title">at</span>&gt; <span class="hljs-title">ping</span> 127.0.0.1 &amp;&gt; <span class="hljs-title">at.txt</span></span><br><span class="hljs-function"><span class="hljs-title">at</span>&gt; &lt;<span class="hljs-title">EOT</span>&gt;</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">at</span> <span class="hljs-title">now</span> + 5 <span class="hljs-title">hours</span> &lt;<span class="hljs-title">at.txt</span>#在从现在开始5小时以后执行<span class="hljs-title">at.txt</span>里面的命令</span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><h4 id="周期性计划任务cron命令"><a href="#周期性计划任务cron命令" class="headerlink" title="周期性计划任务cron命令"></a>周期性计划任务cron命令</h4><p>*来自主程序包cronie，依赖crond服务</p><h5 id="系统cron计划任务"><a href="#系统cron计划任务" class="headerlink" title="系统cron计划任务"></a>系统cron计划任务</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/</span>crontab <br>SHELL=<span class="hljs-regexp">/bin/</span>bash<br>PATH=<span class="hljs-regexp">/sbin:/</span>bin:<span class="hljs-regexp">/usr/</span>sbin:<span class="hljs-regexp">/usr/</span>bin<br>MAILTO=root<br><br><span class="hljs-comment"># For details see man 4 crontabs</span><br><br><span class="hljs-comment"># Example of job definition:</span><br><span class="hljs-comment"># .---------------- minute (0 - 59)</span><br><span class="hljs-comment"># |  .------------- hour (0 - 23)</span><br><span class="hljs-comment"># |  |  .---------- day of month (1 - 31)</span><br><span class="hljs-comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="hljs-comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="hljs-comment"># |  |  |  |  |</span><br><span class="hljs-comment"># *  *  *  *  * user-name  command to be executed</span><br><br></code></pre></td></tr></table></figure><h5 id="用户计划任务"><a href="#用户计划任务" class="headerlink" title="用户计划任务"></a>用户计划任务</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">crontab命令（放在<span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/cron/</span>USERNAME，默认PATH为<span class="hljs-regexp">/usr/</span>bin:/bin,可在第一行修改PATH，%将变成换行符，除非用\转义）：<br>crontab <br>-u user指定用户管理cron任务<br>-e编辑任务 <br>-l列出所有任务  <br>-r移除所有任务  <br><br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span> <span class="hljs-number">3</span> * * <span class="hljs-number">3</span> root  /bin/date #每周三凌晨三点执行data命令<br><br><span class="hljs-attribute">0</span> <span class="hljs-number">6</span>-<span class="hljs-number">12</span>/<span class="hljs-number">2</span> * <span class="hljs-number">11</span> * /app/bin/test.sh#在<span class="hljs-number">11</span>月的每天<span class="hljs-number">6</span>-<span class="hljs-number">12</span>点每个两小时执行test.sh脚本<br><br><span class="hljs-attribute">3</span>,<span class="hljs-number">15</span> * * * * date #每小时的第<span class="hljs-number">3</span>和第<span class="hljs-number">15</span>分钟执行<br><br><span class="hljs-attribute">3</span>,<span class="hljs-number">15</span> <span class="hljs-number">8</span>-<span class="hljs-number">11</span> * * * date #在上午<span class="hljs-number">8</span>点到<span class="hljs-number">11</span>点的第<span class="hljs-number">3</span>和第<span class="hljs-number">15</span>分钟执行<br><br><span class="hljs-attribute">3</span>,<span class="hljs-number">15</span> <span class="hljs-number">8</span>-<span class="hljs-number">11</span> */<span class="hljs-number">2</span> * * date #每隔两天的上午<span class="hljs-number">8</span>点到<span class="hljs-number">11</span>点的第<span class="hljs-number">3</span>和第<span class="hljs-number">15</span>分钟执行<br><br><span class="hljs-attribute">3</span>,<span class="hljs-number">15</span> <span class="hljs-number">8</span>-<span class="hljs-number">11</span> * * <span class="hljs-number">1</span> date #每个星期一的上午<span class="hljs-number">8</span>点到<span class="hljs-number">11</span>点的第<span class="hljs-number">3</span>和第<span class="hljs-number">15</span>分钟执行<br></code></pre></td></tr></table></figure><h2 id="linux进程和内存"><a href="#linux进程和内存" class="headerlink" title="linux进程和内存"></a>linux进程和内存</h2><p><img src="image-20220905105843387.png" alt="image-20220905105843387"></p><h5 id="进程（运行中的程序的副本，被载入内存的指令集和，资源分配的单位）："><a href="#进程（运行中的程序的副本，被载入内存的指令集和，资源分配的单位）：" class="headerlink" title="进程（运行中的程序的副本，被载入内存的指令集和，资源分配的单位）："></a>进程（运行中的程序的副本，被载入内存的指令集和，资源分配的单位）：</h5><p>1：一段供进程执行的程序，该程序可以被多个进程执行。<br>2：独立的内核堆栈。<br>3：进程控制快（task_struct：有了这个数据结构，进程才能成为内核调度的一个基本单位接受内核的调度。同时，这个结构还记录着进程所占用的各项资源。<br>4：独立的存储空间：即拥有专有的用户空间，除了前面的内核空间还有用户空间。</p><h5 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h5><p>线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。在Unix System V及SunOS中也被称为轻量进程（lightweight processes），但轻量进程更多指内核线程（kernel thread），而把用户线程（user thread）称为线程。进程与线程之间的关系 同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等等。但同一进程中的多个线程有各自的调用栈（call stack），自己的寄存器环境（register context），自己的线程本地存储（thread-local storage）。</p><h5 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h5><table><thead><tr><th>比较项</th><th>进程</th><th>线程</th></tr></thead><tbody><tr><td>占用资源</td><td>初始单位为1M，固定不变</td><td>初始为2KB，可随需要增大</td></tr><tr><td>调度所属</td><td>有OS内核完成</td><td>用户完成</td></tr><tr><td>切换开销</td><td>涉及模式切换</td><td>只有三个寄存器的值修改</td></tr><tr><td>性能问题</td><td>资源占用太高，频繁创建销毁会带来性能问题</td><td>资源占用小，不会带来严重性能问题</td></tr><tr><td>数据同步</td><td>需要用锁机制确保数据一直性和可见性</td><td>不需要锁机制，共享资源，执行效率远高于进程</td></tr></tbody></table><h5 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h5><p>Linux操作系统采用虚拟内存管理技术，使得每个进程都有各自互不干涉的进程地址空间。该空间是块大小为4G的线性虚拟空间，用户所看到和接触到的都是该虚拟地址，无法看到实际的物理内存地址。利用这种虚拟地址不但能起到保护操作系统的效果（用户不能直接访问物理内存），而且更重要的是，用户程序可使用比实际物理内存更大的地址空间。</p><h5 id="Linux-的虚拟内存管理："><a href="#Linux-的虚拟内存管理：" class="headerlink" title="Linux 的虚拟内存管理："></a>Linux 的虚拟内存管理：</h5><p>1、每个进程都有独立的虚拟地址空间，进程访问的虚拟地址并不是真正的物理地址；<br>2、虚拟地址可通过每个进程上的页表(在每个进程的内核虚拟地址空间)与物理地址进行映射，获得真正物理地址；<br>3、如果虚拟地址对应物理地址不在物理内存中，则产生缺页中断，真正分配物理地址，同时更新进程的页表；如果此时物理内存已耗尽，则根据内存替换算法淘汰部分页面至物理磁盘中。</p><p><img src="image-20220905110953967.png" alt="image-20220905110953967"></p><h2 id="linux启动流程"><a href="#linux启动流程" class="headerlink" title="linux启动流程"></a>linux启动流程</h2><h5 id="centos6启动"><a href="#centos6启动" class="headerlink" title="centos6启动"></a>centos6启动</h5><p><img src="https://img-blog.csdn.net/20180907200453974?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjI1NTY2Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>POST–GRUB1阶段MBR446–GRUB1.5MBR之后的空间（提供grub2文件所有分区的文件系统）–GRUB2阶段（grub.conf）–kernel(initramfs.img)–根分区–/sbin/init–/etc/inittab–/etc/rc.sysinit–/etc/rc.d/rc–/etc/rcN.d/K,S(/etc/init.d/)–/etc/rc.local–login登录</p><p>1.加载BIOS的硬件信息，获取第一个启动设备<br>2.读取第一个启动设备MBR的引导加载程序(grub)的启动信息<br>3.加载核心操作系统的核心信息，核心开始解压缩，并尝试驱动所有的硬件设备<br>4.核心执行init程序，并获取默认的运行信息<br>5.init程序执行/etc/rc.d/rc.sysinit文件<br>6.启动核心的外挂模块<br>7.init执行运行的各个批处理文件(scripts)<br>8.init执行/etc/rc.d/rc.local<br>9.执行/bin/login程序，等待用户登录<br>10.登录之后开始以Shell控制主机</p><h2 id="systemd服务"><a href="#systemd服务" class="headerlink" title="systemd服务"></a>systemd服务</h2><h5 id="实现目标：systemd服务定时去其他服务器上检查-tmp-下文件的个数，如果发现数量有变化就记录变化情况到文件中。"><a href="#实现目标：systemd服务定时去其他服务器上检查-tmp-下文件的个数，如果发现数量有变化就记录变化情况到文件中。" class="headerlink" title="实现目标：systemd服务定时去其他服务器上检查/tmp/下文件的个数，如果发现数量有变化就记录变化情况到文件中。"></a>实现目标：systemd服务定时去其他服务器上检查/tmp/下文件的个数，如果发现数量有变化就记录变化情况到文件中。</h5><p>从centos7以后开始用systemd代替init进程，系统启动和服务器守护进程管理器，负责在系统启动或运行时，集火系统资源，服务器进程和其他进程</p><p>在/lib/systemd/system/目录下写服务文件test.service</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=test<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">ExecStart</span>=/bin/sh /root/test.sh<br><span class="hljs-attr">ExecStop</span>=/bin/kill sh<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p>服务文件调用/root/test.sh脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>tmp=$(<span class="hljs-built_in">ls</span> -l /tmp/ |<span class="hljs-built_in">wc</span> -l)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span> ; <span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">sleep</span> 3<br>        tmp0=$(<span class="hljs-built_in">ls</span> -l /tmp/ |<span class="hljs-built_in">wc</span> -l)<br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$tmp</span>&quot;</span> != <span class="hljs-string">&quot;<span class="hljs-variable">$tmp0</span>&quot;</span> ];<span class="hljs-keyword">then</span>   tmp=<span class="hljs-variable">$tmp0</span>;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;the number of file in /tmp/ changed : <span class="hljs-variable">$tmp0</span>&quot;</span> &gt;&gt;/root/test.log; <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>加载配置文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl daemon-reload</span> <br></code></pre></td></tr></table></figure><p>开启服务</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">systemctl <span class="hljs-keyword">enable</span> <span class="hljs-comment">--now test.service </span><br></code></pre></td></tr></table></figure><p>查看服务状态</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">systemctl status <span class="hljs-keyword">test</span>.service <br></code></pre></td></tr></table></figure><p><img src="image-20220905133651698.png" alt="image-20220905133651698"></p><h2 id="linux内核编译安装"><a href="#linux内核编译安装" class="headerlink" title="linux内核编译安装"></a>linux内核编译安装</h2><p>查看当前内核版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -r<br></code></pre></td></tr></table></figure><p><img src="image-20220905134152600.png" alt="image-20220905134152600"></p><p>下载所需的内核</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> /usr/local/src<br><span class="hljs-attribute">wget</span> https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/linux-<span class="hljs-number">5</span>.<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.tar.gz<br><span class="hljs-attribute">tar</span> -zxvf linux-<span class="hljs-number">5</span>.<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.tar.gz<br><span class="hljs-attribute">cd</span> linux-<span class="hljs-number">5</span>.<span class="hljs-number">10</span>.<span class="hljs-number">10</span><br><span class="hljs-attribute">ls</span><br></code></pre></td></tr></table></figure><p>安装内核编译所需要的依赖</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">yum <span class="hljs-keyword">install </span>-y ncurses-devel gcc-c++ make openssl-devel <span class="hljs-keyword">bison </span>flex elfutils-libelf-devel<br></code></pre></td></tr></table></figure><p>运行menuconfig程序，选择需要的编译参数</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make menuconfig</span><br></code></pre></td></tr></table></figure><p>进入UI界面，参数不用改，切换到save直接保存，尔后按两下Esc退出。</p><p>编译内核</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">make</span> -j2<br></code></pre></td></tr></table></figure><p>-j2参数根据个人自己的计算机进行设置，注意-j后面的数字不要超过你电脑的核心数就行了。</p><p>这是一个漫长的过程，还有可能会出现错误，耐心的等待吧。注意保证你的电脑网络的畅通以及centos系统有足够大的硬盘空间。</p><p>如果编译完成并没有报错的话就可以进行下一步的编译了。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">make</span> modules<br><span class="hljs-built_in">make</span> modules_install<br><span class="hljs-built_in">make</span> install<br></code></pre></td></tr></table></figure><p>使用grubby切换内核</p><p>grubby是一个用于更新和显示有关各种体系结构特定的引导程序的配置文件信息的命令行工具。 它主要设计用于安装新内核并需要查找有关当前引导环境的信息的脚本，同时也可以对启动内核的各项信息参数进行修改。grubby已经默认安装在centos8中，如果系统中没有grubby我们也可以通过yum进行安装grubby工具。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y grubby<br></code></pre></td></tr></table></figure><p>查看当前系统默认启动的内核</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">grubby --<span class="hljs-keyword">default</span>-kern<br></code></pre></td></tr></table></figure><p>重启系统，感受新内核给你带来的欢乐吧。</p><h2 id="awk命令"><a href="#awk命令" class="headerlink" title="awk命令"></a>awk命令</h2><p>awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p><p>示例1：计算1加到1000000方法</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">awk &#x27;BEGIN&#123;i=<span class="hljs-number">1</span>;<span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span>;<span class="hljs-keyword">while</span>(i&lt;=<span class="hljs-number">1000000</span>)&#123;<span class="hljs-built_in">sum</span>+=i;i++&#125;;<span class="hljs-built_in">print</span> <span class="hljs-built_in">sum</span>&#125;&#x27;<br></code></pre></td></tr></table></figure><p>用awk速度是最快的</p><p><img src="image-20220905145931321.png" alt="image-20220905145931321"></p><p>示例2：打印九九乘法表：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scilab">seq <span class="hljs-number">9</span> | sed <span class="hljs-string">&#x27;H;g&#x27;</span> | awk -v RS=<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-string">&#x27;&#123;for(i=1;i&lt;=NF;i++)printf(&quot;</span>%dx%d=%d<span class="hljs-literal">%s</span><span class="hljs-string">&quot;, i, NR, i*NR, i==NR?&quot;</span>\n<span class="hljs-string">&quot;:&quot;</span>\t<span class="hljs-string">&quot;)&#125;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>AWK用于格式化输出</p><p><img src="image-20220905145912988.png" alt="image-20220905145912988"></p><p>示例3：统计用户名长度</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">awk -F: <span class="hljs-string">&#x27;&#123;print length($1)&#125;&#x27;</span> <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><p><img src="image-20220905150147499.png" alt="image-20220905150147499"></p><p>示例4：格式化打印 username和uid</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">awk <span class="hljs-operator">-</span><span class="hljs-type">F</span>: &#x27;<span class="hljs-type">BEGIN</span>&#123;printf <span class="hljs-string">&quot;--------------------------------<span class="hljs-subst">\n</span>%-20s|%10s|<span class="hljs-subst">\n</span>--------------------------------<span class="hljs-subst">\n</span>&quot;</span>,<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;uid&quot;</span>&#125;&#123;printf <span class="hljs-string">&quot;--------------------------------<span class="hljs-subst">\n</span>%-20s|%10d|<span class="hljs-subst">\n</span>--------------------------------<span class="hljs-subst">\n</span>&quot;</span>,<span class="hljs-variable">$1</span>,<span class="hljs-variable">$3</span>&#125;&#x27; <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>passwd<br></code></pre></td></tr></table></figure><p><img src="image-20220905151314765.png" alt="image-20220905151314765"></p><p>示例5：统计tcp不同状态及出现次数</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">netstat -tan |awk &#x27;/^tcp/&#123;<span class="hljs-keyword">state</span>[<span class="hljs-variable">$NF</span>]++&#125;END&#123;<span class="hljs-keyword">for</span>(i <span class="hljs-keyword">in</span> <span class="hljs-keyword">state</span>)&#123;print i,<span class="hljs-keyword">state</span>[i]&#125;&#125;&#x27;<br></code></pre></td></tr></table></figure><p><img src="image-20220905151724059.png" alt="image-20220905151724059"></p>]]></content>
    
    
    
    <tags>
      
      <tag>定时任务at和cron，进程和内存，启动流程，systemd，内核编译，awk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第三周作业</title>
    <link href="/2022/08/14/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/"/>
    <url>/2022/08/14/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><span id="more"></span><h2 id="搭建私有yumEPEL仓库服务器"><a href="#搭建私有yumEPEL仓库服务器" class="headerlink" title="搭建私有yumEPEL仓库服务器"></a>搭建私有yumEPEL仓库服务器</h2><p>在部分情况下，终端不能具有上网功能，但需要下载软件包，此时可以通过搭建本地yum的服务器来实现软件包的本地下载，客户端无需访问互联网，提高了安全性</p><h4 id="1-服务器需要关闭SELlinux和防火墙功能"><a href="#1-服务器需要关闭SELlinux和防火墙功能" class="headerlink" title="1.服务器需要关闭SELlinux和防火墙功能"></a>1.服务器需要关闭SELlinux和防火墙功能</h4><figure class="highlight routeros"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs routeros">sed -i <span class="hljs-string">&#x27;/^SELINUX=/c SELINUX=disabled&#x27;</span> /etc/selinux<span class="hljs-built_in">/config </span><br>systemctl <span class="hljs-built_in">disable</span>  --now firewalld  <br></code></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h4 id="2-安装httpd工具并开启功能："><a href="#2-安装httpd工具并开启功能：" class="headerlink" title="2.安装httpd工具并开启功能："></a>2.安装httpd工具并开启功能：</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">yum -y <span class="hljs-keyword">install </span>httpd <span class="hljs-comment">;systemctl enable --now httpd; </span><br></code></pre></td></tr></table></figure><p>在/var/www/html/目录下提供http服务</p><p><img src="image-20220809204250503.png" alt="image-20220809204250503"></p><p>开启httpd服务后可以在客户端上访问本机ip提供的http服务</p><p><img src="image-20220809204658766.png" alt="image-20220809204658766"></p><h4 id="3-下载rpm包及其元数据到服务器上"><a href="#3-下载rpm包及其元数据到服务器上" class="headerlink" title="3.下载rpm包及其元数据到服务器上"></a>3.下载rpm包及其元数据到服务器上</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">dnf reposync --repoid=epel   --download-metadata  -p <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span><br></code></pre></td></tr></table></figure><p><img src="image-20220809204442708.png" alt="image-20220809204442708"></p><h4 id="4-在其他机器上可以设置路径为服务器地址的私有库"><a href="#4-在其他机器上可以设置路径为服务器地址的私有库" class="headerlink" title="4.在其他机器上可以设置路径为服务器地址的私有库"></a>4.在其他机器上可以设置路径为服务器地址的私有库</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/yum</span>.repos.d/base.repo<br></code></pre></td></tr></table></figure><p><img src="image-20220809212341853.png" alt="image-20220809212341853"></p><p>改完后可以用yum repolist命令查看epel源是否已经配置完成</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yum repolist</span><br></code></pre></td></tr></table></figure><p><img src="image-20220809212230034.png" alt="image-20220809212230034"></p><h2 id="TCP三次握手和四次挥手"><a href="#TCP三次握手和四次挥手" class="headerlink" title="TCP三次握手和四次挥手"></a>TCP三次握手和四次挥手</h2><h4 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h4><p><img src="985821-20170802101806802-1497343688.png" alt="985821-20170802101806802-1497343688"></p><h5 id="详述："><a href="#详述：" class="headerlink" title="详述："></a>详述：</h5><p>Client端发送连接请求报文，Server段接受连接后回复ACK报文，并为这次连接分配资源。Client端接收到ACK报文后也向Server段发生ACK报文，并分配资源，这样TCP连接就建立了。</p><p>最初两端的TCP进程都处于CLOSED关闭状态，A主动打开连接，而B被动打开连接。（<strong>A、B关闭状态CLOSED</strong>——<strong>B收听状态LISTEN——A同步已发送状态SYN-SENT——B同步收到状态SYN-RCVD——A、B连接已建立状态ESTABLISHED</strong>）</p><ul><li>B的TCP服务器进程先创建传输控制块TCB，准备接受客户进程的连接请求。然后服务器进程就处于LISTEN（收听）状态，等待客户的连接请求。若有，则作出响应。</li><li><strong>1****）第一次握手：</strong>A的TCP客户进程也是首先创建传输控制块TCB，然后向B发出连接请求报文段，（首部的<strong>同步位SYN=1</strong>，<strong>初始序号seq=x）</strong>，（SYN=1的报文段不能携带数据）但要消耗掉一个序号，此时TCP客户进程进入SYN-SENT（同步已发送）状态。</li><li><strong>2****）第二次握手：</strong>B收到连接请求报文段后，如同意建立连接，则向A发送确认，在确认报文段中（<strong>SYN=1，ACK=1，确认号ack=x+1，初始序号seq=y</strong>），测试TCP服务器进程进入SYN-RCVD（同步收到）状态；</li><li><strong>3****）第三次握手：</strong>TCP客户进程收到B的确认后，要向B给出确认报文段（<strong>ACK=1，确认号ack=y+1，序号seq=x+1</strong>）（初始为seq=x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。TCP连接已经建立，A进入ESTABLISHED（已建立连接）。</li><li>当B收到A的确认后，也进入ESTABLISHED状态。</li></ul><h4 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h4><p><img src="985821-20170802101823505-1177747613.png" alt="985821-20170802101823505-1177747613"></p><h5 id="详述：-1"><a href="#详述：-1" class="headerlink" title="详述："></a>详述：</h5><p>假设Client端发起中断连接请求，也就是发送FIN报文。Server端接到FIN报文后，意思是说”我Client端没有数据要发给你了”，但是如果你还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK，”告诉Client端，你的请求我收到了，但是我还没准备好，请继续你等我的消息”。这个时候Client端就进入FIN_WAIT状态，继续等待Server端的FIN报文。当Server端确定数据已发送完成，则向Client端发送FIN报文，”告诉Client端，好了，我这边数据发完了，准备好关闭连接了”。Client端收到FIN报文后，”就知道可以关闭连接了，但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。“，Server端收到ACK后，”就知道可以断开连接了”。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！</p><p>数据传输结束后，通信的双方都可释放连接，A和B都处于ESTABLISHED状态。（<strong>A、B连接建立状态ESTABLISHED</strong>——<strong>A终止等待1状态FIN-WAIT-1</strong>——<strong>B关闭等待状态CLOSE-WAIT</strong>——<strong>A终止等待2状态FIN-WAIT-2</strong>——<strong>B最后确认状态LAST-ACK</strong>——<strong>A时间等待状态TIME-WAIT</strong>——<strong>B、A关闭状态CLOSED</strong>）</p><ul><li>1）A的应用进程先向其TCP发出连接释放报文段（<strong>FIN=1，序号seq=u</strong>），并停止再发送数据，主动关闭TCP连接，进入FIN-WAIT-1（终止等待1）状态，等待B的确认。</li><li>2）B收到连接释放报文段后即发出确认报文段，（<strong>ACK=1，确认号ack=u+1，序号seq=v</strong>），B进入CLOSE-WAIT（关闭等待）状态，此时的TCP处于半关闭状态，A到B的连接释放。</li><li>3）A收到B的确认后，进入FIN-WAIT-2（终止等待2）状态，等待B发出的连接释放报文段。</li><li>4）B没有要向A发出的数据，B发出连接释放报文段（<strong>FIN=1，ACK=1，序号seq=w，确认号ack=u+1），</strong>B进入LAST-ACK（最后确认）状态，等待A的确认。</li><li>5）A收到B的连接释放报文段后，对此发出确认报文段（<strong>ACK=1，seq=u+1，ack=w+1</strong>），A进入TIME-WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，A才进入CLOSED状态。</li></ul><h2 id="centos和Ubantu静态配置网卡IP"><a href="#centos和Ubantu静态配置网卡IP" class="headerlink" title="centos和Ubantu静态配置网卡IP"></a>centos和Ubantu静态配置网卡IP</h2><h4 id="centos配置IP"><a href="#centos配置IP" class="headerlink" title="centos配置IP"></a>centos配置IP</h4><p>我使用的是centos7版本，可以在/etc/sysconfig/network-scripts/ifcfg-eth0文件里修改ip地址</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/network-scripts/i</span>fcfg-eth0 <br></code></pre></td></tr></table></figure><p><img src="image-20220813110122432.png" alt="image-20220813110122432"></p><p>修改BOOTPROTO=”static”，之后可以将新的ip地址赋给IPADDR，网络掩码赋给PREFIX，修改完成以后保存退出</p><p>立即生效：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nmcli</span> connection reload ; <span class="hljs-attribute">nmcli</span> connection up eth0 ;<br></code></pre></td></tr></table></figure><p><img src="image-20220813110614918.png" alt="image-20220813110614918"></p><p>查看修改后的ip地址：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ip <span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><p><img src="image-20220813110659607.png" alt="image-20220813110659607"></p><h4 id="Ubantu网卡IP"><a href="#Ubantu网卡IP" class="headerlink" title="Ubantu网卡IP"></a>Ubantu网卡IP</h4><p>Ubantu的网卡配置文件采用YAML格式以/etc/netplan/xxx.yaml文件命名方式存放</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>netplan/eth0.yaml <br></code></pre></td></tr></table></figure><p><img src="image-20220814224308556.png" alt="image-20220814224308556"></p><p>配置文件修改完成后使用 netplan apply 命令生效</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">netplan <span class="hljs-built_in">apply</span> <br></code></pre></td></tr></table></figure><p>查看修改后的ip地址：</p><p><img src="image-20220814230117737.png" alt="image-20220814230117737"></p><h2 id="脚本实现expect免密登录"><a href="#脚本实现expect免密登录" class="headerlink" title="脚本实现expect免密登录"></a>脚本实现expect免密登录</h2><h5 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h5><p>1）通过shift读取脚本参数<br>2）通过select来选择功能.例如功能有</p><ul><li>安装mysql</li><li>安装apache</li><li>免密钥登陆主机<br>当前我们只实现免密钥登陆主机<br>3）通过函数封装每个功能<br>4）将免密钥登陆的过程可以重复进行, while 循环实现重复，需要有退出过程。当用户输入exit时，退出免密钥功能。<br>5）支持输入一批主机免密钥，使用数组实现</li></ul><h5 id="脚本实现"><a href="#脚本实现" class="headerlink" title="脚本实现"></a>脚本实现</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>PS3=<span class="hljs-string">&quot;请选择功能(1-3)&quot;</span><br>choices=<span class="hljs-string">&quot;--安装myspl --安装apache  --免密钥登录主机&quot;</span><br><span class="hljs-built_in">declare</span> -A host <span class="hljs-comment">#定义关联数组</span><br><br><br><span class="hljs-function"><span class="hljs-title">ssh_</span></span>() &#123; <span class="hljs-comment">#实现免密登录</span><br>expect &lt;&lt;<span class="hljs-string">EOF  #在shell中使用重定向编写expect</span><br><span class="hljs-string">spawn ssh-keygen -t rsa  #生成密钥</span><br><span class="hljs-string">expect &#123; </span><br><span class="hljs-string">&quot;(/root/.ssh/id_rsa)&quot; &#123; send &quot;\n&quot;;exp_continue &#125;</span><br><span class="hljs-string">&quot;Overwrite&quot; &#123; send &quot;y\n&quot;;exp_continue &#125;</span><br><span class="hljs-string">&quot;passphrase&quot; &#123; send &quot;\n&quot;;exp_continue &#125;</span><br><span class="hljs-string">&quot;again&quot; &#123; send &quot;\n&quot; &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">expect eof</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-keyword">while</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> ];<span class="hljs-keyword">do</span> <span class="hljs-comment">#shift两两读取脚本参数，依次为主机IP和密码，然后向其发送生成的公钥文件</span><br>hostip=<span class="hljs-variable">$1</span><br><span class="hljs-built_in">shift</span><br>secret=<span class="hljs-variable">$1</span><br><span class="hljs-built_in">shift</span><br>host[<span class="hljs-variable">$hostip</span>]=<span class="hljs-variable">$secret</span><br>expect &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">spawn ssh-copy-id -i /root/.ssh/id_rsa.pub root@$hostip</span><br><span class="hljs-string">expect &#123;</span><br><span class="hljs-string">&quot;yes/no&quot; &#123; send &quot;yes&quot;;exp_continue &#125;</span><br><span class="hljs-string">&quot;password&quot; &#123; send &quot;$secret\n&quot; &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">expect eof</span><br><span class="hljs-string">EOF</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>;<span class="hljs-keyword">do</span> <span class="hljs-comment">#while循环实现多次的免密登录和增加免密登录的主机</span><br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">请选择1-3</span><br><span class="hljs-string">1)输入支持想要免密登录的主机IP和登录密码</span><br><span class="hljs-string">2)输入想要测试远程登录的主机IP</span><br><span class="hljs-string">3)退出免秘钥登录功能</span><br><span class="hljs-string">EOF</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;您的选择：&quot;</span> i<br><span class="hljs-keyword">case</span> <span class="hljs-variable">$i</span> <span class="hljs-keyword">in</span><br>1)<br><span class="hljs-built_in">read</span> -p<span class="hljs-string">&quot;IP和密码：&quot;</span> hostip secret<br>host[<span class="hljs-variable">$hostip</span>]=<span class="hljs-variable">$secret</span><br>expect &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">spawn ssh-copy-id -i /root/.ssh/id_rsa.pub root@$hostip</span><br><span class="hljs-string">expect &#123;</span><br><span class="hljs-string">&quot;yes/no&quot; &#123; send &quot;yes&quot;;exp_continue &#125; </span><br><span class="hljs-string">&quot;password&quot; &#123; send &quot;$secret\n&quot; &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">expect eof</span><br><span class="hljs-string">EOF</span><br>;;<br>2)<br><span class="hljs-built_in">read</span> -p<span class="hljs-string">&quot;测试ip：&quot;</span>  testip<br>ssh root@<span class="hljs-variable">$testip</span><br>;;<br>3)<br><span class="hljs-built_in">break</span><br>;;<br><span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br><br>&#125;<br><br><br>select choice <span class="hljs-keyword">in</span> <span class="hljs-variable">$choices</span>;<span class="hljs-keyword">do</span> <span class="hljs-comment">#选择功能，暂时只实现免密登录功能</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-variable">$REPLY</span> <span class="hljs-keyword">in</span> <br>                1)<br>                        <span class="hljs-built_in">continue</span><br>                        ;;<br>                2)<br>                        <span class="hljs-built_in">continue</span><br>                        ;;<br>                3)<br>                        ssh_ $*<br><br>                        ;;<br><br>        <span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p><img src="image-20220823223149269.png" alt="image-20220823223149269"></p>]]></content>
    
    
    
    <tags>
      
      <tag>yum私有源 TCP三次握手四次挥手 centos和Ubantu静态ip expect免密登录 shell编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第二周作业</title>
    <link href="/2022/08/01/%E7%AC%AC%E4%BA%8C%E5%91%A8%E4%BD%9C%E4%B8%9A/"/>
    <url>/2022/08/01/%E7%AC%AC%E4%BA%8C%E5%91%A8%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><span id="more"></span><h2 id="第二周作业："><a href="#第二周作业：" class="headerlink" title="第二周作业："></a>第二周作业：</h2><p>完成一个shell脚本，脚本的作用。</p><ul><li>运行脚本可以显示出本机的ip地址</li><li>如果ip地址中有3这个数字，那么就打印出当前的系统时间</li><li>如果ip地址中不含3这个数字，就批量建立用户magedu_00, magedu_01, … magedu_100并且所有用户同属于magedu组</li><li>打印出/etc/passwd这个文件中可以登陆的用户（非/usr/sbin/nologin）</li><li>yum安装nginx服务，并且启动该服务</li><li>一个脚本完成</li></ul><h4 id="运行脚本可以显示出本机的ip地址"><a href="#运行脚本可以显示出本机的ip地址" class="headerlink" title="运行脚本可以显示出本机的ip地址:"></a>运行脚本可以显示出本机的ip地址:</h4><p>ip地址可以用ifconfig命令查看</p><p><img src="image-20220801231149391.png" alt="image-20220801231149391"></p><p>结合sed命令和正则表达式,从中匹配ip地址</p><p><img src="image-20220801231410450.png" alt="image-20220801231410450"></p><h4 id="如果ip地址中有3这个数字，那么就打印出当前的系统时间"><a href="#如果ip地址中有3这个数字，那么就打印出当前的系统时间" class="headerlink" title="如果ip地址中有3这个数字，那么就打印出当前的系统时间"></a>如果ip地址中有3这个数字，那么就打印出当前的系统时间</h4><p>将ip地址赋给变量，然后可以用条件测试表达式[[ expression ]]和正则表达式判断是否有ip地址中是否包含3</p><p>然后显示date命令的结果</p><p><img src="image-20220801231929970.png" alt="image-20220801231929970"></p><h4 id="如果ip地址中不含3这个数字，就批量建立用户magedu-00-magedu-01-…-magedu-100并且所有用户同属于magedu组"><a href="#如果ip地址中不含3这个数字，就批量建立用户magedu-00-magedu-01-…-magedu-100并且所有用户同属于magedu组" class="headerlink" title="如果ip地址中不含3这个数字，就批量建立用户magedu_00, magedu_01, … magedu_100并且所有用户同属于magedu组"></a>如果ip地址中不含3这个数字，就批量建立用户magedu_00, magedu_01, … magedu_100并且所有用户同属于magedu组</h4><p>在ip地址不含3的情况下，批量创建用户，并且主组都为magedu组，这里用到了useradd和groupadd命令来创建用户和组，因为要批量创建，可以使用xargs命令配合管道符|，将用户名的标准输出作为100个动态参数传给useradd命令</p><p><img src="image-20220801232922654.png" alt="image-20220801232922654"></p><h4 id="打印出-etc-passwd这个文件中可以登陆的用户（非-usr-sbin-nologin）"><a href="#打印出-etc-passwd这个文件中可以登陆的用户（非-usr-sbin-nologin）" class="headerlink" title="打印出/etc/passwd这个文件中可以登陆的用户（非/usr/sbin/nologin）"></a>打印出/etc/passwd这个文件中可以登陆的用户（非/usr/sbin/nologin）</h4><p>用管道符和sed命令，即可用正则表达式筛选符合条件的用户</p><p><img src="image-20220801233110510.png" alt="image-20220801233110510"></p><h4 id="yum安装nginx服务，并且启动该服务"><a href="#yum安装nginx服务，并且启动该服务" class="headerlink" title="yum安装nginx服务，并且启动该服务"></a>yum安装nginx服务，并且启动该服务</h4><p><img src="image-20220801233230108.png" alt="image-20220801233230108"></p><h4 id="最终整合成一个shell脚本："><a href="#最终整合成一个shell脚本：" class="headerlink" title="最终整合成一个shell脚本："></a>最终整合成一个shell脚本：</h4><p>#!/bin/bash</p><p>ip_ad=ifconfig eth0 |sed -nr ‘2s/^.inet (([0-9]{1,3}.){3}[0-9]{1,3}  )net.$/\1/p’</p><p>echo  host ip address is $ip_ad<br>if [[ $ip_ad =~ ^.3.$ ]]; then<br>        echo ip address has 3, print time date +%F-%T</p><p>else echo “ip address do not have 3 ,create 100 users”<br>        groupadd -g 102 -r magedu  2&gt;/dev/null<br>        echo magedu{00..100}|xargs -n1 useradd -g magedu ;fi </p><p>echo print users who can login:<br>cat /etc/passwd | sed -r /nologin$/d<br>yum -y install nginx<br>systemctl enable  –now nginx.service</p><p>运行结果：</p><p><img src="image-20220801234214290.png" alt="image-20220801234214290"><img src="image-20220801234231163.png" alt="image-20220801234231163"></p>]]></content>
    
    
    
    <tags>
      
      <tag>shell脚本编程 正则表达式 sed命令 Nginx安装 用户和组的创建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一周作业</title>
    <link href="/2022/07/28/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/"/>
    <url>/2022/07/28/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><span id="more"></span><h2 id="图文并茂解释开源许可证-GPL、BSD、MIT、Mozilla、Apache和LGPL的区别？"><a href="#图文并茂解释开源许可证-GPL、BSD、MIT、Mozilla、Apache和LGPL的区别？" class="headerlink" title="图文并茂解释开源许可证 GPL、BSD、MIT、Mozilla、Apache和LGPL的区别？"></a>图文并茂解释开源许可证 GPL、BSD、MIT、Mozilla、Apache和LGPL的区别？</h2><h3 id="BSD"><a href="#BSD" class="headerlink" title="BSD"></a>BSD</h3><p>BSD开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”，可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。</p><p>但”为所欲为”的前提当你发布使用了BSD协议的代码，或者以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件：</p><p>◆如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。</p><p>◆如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。</p><p>◆不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。</p><p>BSD 代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对 商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。</p><h3 id="AL2-0"><a href="#AL2-0" class="headerlink" title="AL2.0"></a>AL2.0</h3><p>Apache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布（作为开源或商业软件）。需要满足的条件也和BSD类似：</p><p>◆需要给代码的用户一份Apache Licence</p><p>◆如果你修改了代码，需要在被修改的文件中说明。</p><p>◆在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。</p><p>◆如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以在Notice中增加自己的许可，但不可以表现为对Apache Licence构成更改。</p><p>Apache Licence也是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。</p><h3 id="GPL"><a href="#GPL" class="headerlink" title="GPL"></a>GPL</h3><p>我们很熟悉的Linux就是采用了GPL。GPL协议和BSD， Apache Licence等鼓励代码重用的许可很不一样。GPL的出发点是代码的开源/免费使用和引用/修改/衍生代码的开源/免费使用，但不允许修改后和衍生的代 码做为闭源的商业软件发布和销售。这也就是为什么我们能用免费的各种linux，包括商业公司的linux和linux上各种各样的由个人，组织，以及商 业软件公司开发的免费软件了。</p><p>GPL协议的主要内容是只要在一个软件中使用（”使用”指类库引用，修改后的代码或者衍生代码）GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题， 还可以享受免费的优势。</p><p>由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。</p><p>其它细节如再发布的时候需要伴随GPL协议等和BSD/Apache等类似。</p><h3 id="LGPL"><a href="#LGPL" class="headerlink" title="LGPL"></a>LGPL</h3><p>LGPL 是GPL的一个为主要为类库使用设计的开源协议。和GPL要求任何使用/修改/衍生之GPL类库的的软件必须采用GPL协议不同。LGPL 允许商业软件通过类库引用（link）方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并 发布和销售。</p><p>但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因 此LGPL协议的开源 代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p><p>GPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品。</p><h3 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h3><p>MIT是和BSD一样宽范的许可协议，作者只想保留版权，而无任何其它的限制。也就是说，你必须在你的发行版里包含原许可协议的声明，无论你是以二进制发布的还是以源代码发布的。MIT协议又称麻省理工学院许可证，最初由麻省理工学院开发。被授权人权利：1、被授权人有权利使用、复制、修改、合并、出版发行、散布、再授权及贩售软件及软件的副本。2、被授权人可根据程式的需要修改授权条款为适当的内容。被授权人义务：在软件和软件的所有副本中都必须包含版权声明和许可声明。</p><p><img src="%E8%AE%B8%E5%8F%AF%E8%AF%81.webp" alt="许可证"></p><h2 id="LINUX获取帮助-man命令"><a href="#LINUX获取帮助-man命令" class="headerlink" title="LINUX获取帮助:man命令"></a>LINUX获取帮助:man命令</h2><h3 id="man手册的格式"><a href="#man手册的格式" class="headerlink" title="man手册的格式"></a><strong>man手册的格式</strong></h3><p>  NAME     命令名称及功能简要说明</p><p>  SYNOPSIS   用法说明，包括可用的选项</p><p>  []   可选内容</p><p>  &lt;&gt;   必选内容</p><p>  a|b   二选一</p><p>  {}   分组</p><p>  …   同一内容可出现多次</p><p>  DESCRIPTION 命令功能的详细说明，可能包括每一个选项的意义</p><p>  OPTIONS    说明每一项的意义</p><p>  FILES     此命令相关的配置文件    </p><p>  EXAMPLES  使用示例</p><p>  SEE ALSO   其他帮助参考  </p><h3 id="man手册的使用方法"><a href="#man手册的使用方法" class="headerlink" title="man手册的使用方法"></a><strong>man手册的使用方法</strong></h3><p>  翻屏</p><p>​    向后翻一屏：space(空格键)  向前翻一屏：b</p><p>​    向后翻一行：Enter(回车键)  向前翻一行：k</p><p>  查找：</p><p>  /KEYWORD  向后查找   n：下一个</p><p>  ?KEYWORD 向前查找   N：前一个</p><p>  退出：q</p><p><img src="image-20220729093945357.png" alt="image-20220729093945357"></p><h3 id="man常用选项"><a href="#man常用选项" class="headerlink" title="man常用选项"></a><strong>man常用选项</strong></h3><p>man -a keyword  列出所有帮助</p><p>man -k keyword  搜索所有man手册</p><p>man -f keyword  相当于whatis</p><p>man -w keyword  打开man帮助文件的路径</p><p>例如：查看fstab文件格式</p><p><img src="image-20220729105836781.png" alt="image-20220729105836781"></p><p>查看/etc/下的fstab文件</p><p><img src="image-20220729105930724.png" alt="image-20220729105930724"></p><ul><li><p><code>/etc/fstab</code> 文件包含了如下字段，通过空格或 Tab 分隔：</p><figure class="highlight vim"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs vim">&lt;<span class="hljs-keyword">file</span> <span class="hljs-built_in">system</span>&gt;<span class="hljs-symbol">&lt;dir&gt;</span><span class="hljs-symbol">&lt;type&gt;</span><span class="hljs-symbol">&lt;options&gt;</span><span class="hljs-symbol">&lt;dump&gt;</span><span class="hljs-symbol">&lt;pass&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p><file systems> - 要挂载的分区或存储设备.</p></li><li><dir> - <file systems>的挂载位置。</li><li><p><type> - 要挂载设备或是分区的文件系统类型，支持许多种不同的文件系统：ext2, ext3, ext4, reiserfs, xfs, jfs, smbfs, iso9660, vfat, ntfs, swap 及 auto。 设置成auto类型，mount 命令会猜测使用的文件系统类型，对 CDROM 和 DVD 等移动设备是非常有用的。</p></li><li><p><options> - 挂载时使用的参数，注意有些mount 参数是特定文件系统才有的。一些比较常用的参数有：</p></li><li><p>auto - 在启动时或键入了 mount -a 命令时自动挂载。</p></li><li><p>noauto - 只在你的命令下被挂载。</p></li><li><p>exec - 允许执行此分区的二进制文件。</p></li><li><p>noexec - 不允许执行此文件系统上的二进制文件。</p></li><li><p>ro - 以只读模式挂载文件系统。</p></li><li><p>rw - 以读写模式挂载文件系统。</p></li><li><p>user - 允许任意用户挂载此文件系统，若无显示定义，隐含启用 noexec, nosuid, nodev 参数。</p></li><li><p>users - 允许所有 users 组中的用户挂载文件系统.</p></li><li><p>nouser - 只能被 root 挂载。</p></li><li><p>owner - 允许设备所有者挂载.</p></li><li><p>sync - I/O 同步进行。</p></li><li><p>async - I/O 异步进行。</p></li><li><p>dev - 解析文件系统上的块特殊设备。</p></li><li><p>nodev - 不解析文件系统上的块特殊设备。</p></li><li><p>suid - 允许 suid 操作和设定 sgid 位。这一参数通常用于一些特殊任务，使一般用户运行程序时临时提升权限。</p></li><li><p>nosuid - 禁止 suid 操作和设定 sgid 位。</p></li><li><p>noatime - 不更新文件系统上 inode 访问记录，可以提升性能(参见 atime 参数)。</p></li><li><p>nodiratime - 不更新文件系统上的目录 inode 访问记录，可以提升性能(参见 atime 参数)。</p></li><li><p>relatime - 实时更新 inode access 记录。只有在记录中的访问时间早于当前访问才会被更新。（与 noatime 相似，但不会打断如 mutt 或其它程序探测文件在上次访问后是否被修改的进程。），可以提升性能(参见 atime 参数)。</p></li><li><p>flush - vfat 的选项，更频繁的刷新数据，复制对话框或进度条在全部数据都写入后才消失。</p></li><li><p>defaults - 使用文件系统的默认挂载参数，例如 ext4 的默认参数为:rw, suid, dev, exec, auto, nouser, async.</p></li><li><p><dump> dump 工具通过它决定何时作备份. dump 会检查其内容，并用数字来决定是否对这个文件系统进行备份。 允许的数字是 0 和 1 。0 表示忽略， 1 则进行备份。大部分的用户是没有安装 dump 的 ，对他们而言 <dump> 应设为 0。</p></li><li><p><pass> fsck 读取 <pass> 的数值来决定需要检查的文件系统的检查顺序。允许的数字是0, 1, 和2。 根目录应当获得最高的优先权 1, 其它所有需要被检查的设备设置为 2. 0 表示设备不会被 fsck 所检查。</p></li></ul></li></ul><h2 id="LINUX标准目录结构FHS"><a href="#LINUX标准目录结构FHS" class="headerlink" title="LINUX标准目录结构FHS"></a>LINUX标准目录结构FHS</h2><blockquote><p>因为利用 Linux 来开发产品或 distribution 的团队实在太多了，如果每个人都用自己的想法来配置文件放置的目录，那么将可能造成很多管理上的困扰。所以，后来就有了 Filesystem Hierarchy Standard（FHS）标准的出炉了。</p><p>根据 FHS 的官方文件指出，其主要目的是希望让用户可以了解到数据通常放置于哪个目录下。也就是说，FHS 的重点在于规范每个特定的目录下应该要放置什么样子的数据而已。</p></blockquote><p>FHS 依据文件系统使用的频繁与否与是否用户随意改动，而将目录定义成四种交互作用的形态：</p><p>　　<strong>可分享的</strong>：可以分享给其他系统挂载使用的目录，所以包括执行文件与用户的邮件等数据，是能够分享给网络上其他主机挂载用的目录。</p><p>　　<strong>不可分享的</strong>：自己机器上面运行的设备文件或者是与程序有关的 socket 文件等，由于仅与自身机器有关，所以不适合分享给其他主机。</p><p>　　<strong>不变的</strong>：有些数据是不会经常变动的，只会随着系统版本而变动。例如函数库、说明文件、系统管理员所管理的主机服务配置文件等。</p><p>　　<strong>可变动的</strong>：经常改变的数据，例如登录文件、用户文件等。<img src="20200229184931908.png" alt="20200229184931908"></p><p>/：是Linux文件系统的根目录<br>/boot：系统启动所需要的文件目录<br>/bin：存放用户命令 例如：/bin/ls<br>/dev：设备文件目录<br>/etc：系统配置文件目录<br>/home：普通用户家目录<br>/root: 系统管理员root家目录<br>/run：进程的运行数据存放目录<br>/sbin：存放系统命令；管理员专用 例如：/sbin/shutdown<br>/tmp：临时文件目录；任何人都可访问，存放周期10天<br>/usr：常规目录；存放程序文件，库文件，共享文件，各种文档等<br>/usr/bin：存放后期安装的程序的运行脚本<br>/usr/local：第三方程序安装目录<br>/usr/sbin：类似/sbin；存放管理员使用的命令<br>/usr/tmp：被抛弃临时文件目录<br>/var：动态数据文件目录；日志文件log，数据库，缓存目录等<br>/var/tmp：临时文件目录；存放周期更长</p><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><p>文件类型：-普通文件，d目录文件directory，l符号链接文件link，b块设备block，c字符设备character，p管道文件pipe，s套接字文件socket<br>显示当前目录的绝对路径：pwd<br>只取文件名不取路径名：basename     只取路径名不取文件名：dirname(网络路径也可以用)<br>回到前一级目录：cd -   回到家目录：cd<br>判断文件类型：file<br>回车是光标移到行首，换行是换到下一行，Windows里面两者是分开的，linux里面两者合在一起，所以两系统文本文件不兼容，可通过dos2unix来转换，unix2dos可以转化回去<br>查看文件内容：cat file<br>文件备份：cp<br>文件改名或文件搬移：mv<br>批量改名：rename<br>删除命令：rm(慎用)<br>创建目录：mkdir   只能删除空目录：rmdir  列出目录：tree -d<br>空间不够不一定是磁盘空间不够，也有可能是iNode数量不够<br>查看磁盘使用情况：df -h<br>删除大文件后，发现磁盘仍无剩余空间可能因为大文件已经打开了，或正在使用，空间不会马上释放<br>清空文件内容： cat /dev/null &gt; xxx.xxx<br>硬链接文件(给文件取别名)：ln file1  file2(不支持对文件夹链接，不支持跨区链接)     软链接不受这个限制：ln  -s  file1 file2（此时file1的相对路径是相对file2的）  删除软硬链接时最后不要加/  例子:rm -rf  /data/boot</p><h2 id="用户和组"><a href="#用户和组" class="headerlink" title="用户和组"></a>用户和组</h2><p><strong>Linux的多用户多任务</strong></p><p>Linux 系统是一个多用户多任务的操作系统，所谓多用户多任务，是指支持多个用户在同一时间内登陆，不同用户可以执行不同的任务，并且互不影响。</p><p>例如：</p><p>小明所在的运维团队一共有四个人，分别有大毛，二毛，三毛，大毛负责网站，他的账户叫wangzhan， 二毛负责数据库，他的账户叫shujuku。</p><p>在同一时间，大毛和二毛都可以登录这台服务器，大毛可以查询网站的日志，二毛可以处理数据库的问题，他们之间互不影响。</p><p>由于我们设置了权限，大毛只能访问网站的日志，无法访问数据库;二毛可以处理数据库问题，但是不能访问网站的日志。这就实现了我们的多用户多任务的运行机制。</p><p><strong>什么是用户</strong></p><p>任何一个运维人员想要登录服务器，都必须先申请一个账号，然后以这个账号的身份进入系统，就像我们前面说的wangzhan这个账号。每个账号都拥有一个唯一的用户名和各自的密码，用户在登录时输入正确的用户名和密码后，就能够进入系统，默认会进入到这个用户自己的主目录 </p><p><strong>什么是用户组</strong></p><p>用户组是具有相同特征用户的逻辑集合，简单来说，就是具有相同权限的用户的集合。 </p><p>例如：人事部有20名员工，他们都需要访问一个文件夹，如果我们给这20个用户的账号分别设置权限，这样太麻烦了，所以我们会建立一个用户组叫HR，对这个组设置权限，将这20个用户加入这个组就可以了。</p><p><strong>用户和用户组的关系</strong></p><p><strong>A</strong> 一个用户可以属于一个用户组，具有此用户组的权限。</p><p>HR组可以访问/hrfile的文件夹，当user01属于HR组，那么user01就可以访问/hrfile这个文件夹</p><p><strong>B</strong> 一个用户可以属于多个用户组，此时具有多个组的共同权限</p><p>HR可以访问/hrfile的文件夹，运维可以访问/yunweifile的文件夹，当user01同时属于HR组和运维组，那么user01可以访问 /hrfile和/yunweifile</p><p><strong>C</strong> 多个用户可以属于一个用户组，多个用户都具有此用户组的权限。</p><p><strong>主组</strong>：指用户创建时默认所属的组，<strong>每个用户的主组只能有一个</strong>。创建用户时会同时创建一个和用户名相同的组。</p><p>例如：添加用户xiaoming，在建立用户 xiaoming 的同时，就会建立 xiaoming 组作为 xiaoming 用户的初始组。</p><p><strong>附加组</strong>：每个用户只能有一个主组，除主组外，用户再加入其他的用户组，这些用户组就是这个用户的附加组。<strong>每个用户的附加组可以有多个</strong>，而且用户可以有这些附加组的权限。</p><p>通常用户和用户组的管理，包含以下工作：</p><p>☆ 用户组的管理</p><p>☆ 用户账号的添加、删除、修改以及用户密码的管理</p><p>注意三个文件：</p><p><strong>/etc/passwd</strong> 用户配置文件，存储用户的基本信息</p><p><strong>/etc/group</strong> 存储用户组的信息</p><p><strong>/etc/shadow</strong> 存储用户的密码信息</p><h5 id="相关命令：groupadd-groupmod-groupdel-useradd-usermod-userdel"><a href="#相关命令：groupadd-groupmod-groupdel-useradd-usermod-userdel" class="headerlink" title="相关命令：groupadd  groupmod  groupdel  useradd  usermod  userdel"></a>相关命令：groupadd  groupmod  groupdel  useradd  usermod  userdel</h5><h2 id="文件目录权限"><a href="#文件目录权限" class="headerlink" title="文件目录权限"></a>文件目录权限</h2><p>Linux系统中的每个文件和目录都有<strong>访问许可权限</strong>，用他来确定谁能通过何种方式对文件和目录进行访问和操作。</p><p><strong>权限的分类:</strong></p><p><strong>r 读权限</strong>：可以打开文件、目录读取查看；<br><strong>w 写权限</strong>：对文件、目录可以编写更改；<br><strong>x 执行权限</strong>：对文件可执行(可执行文件)、对目录可查找该目录下的内容；</p><ul><li>没有权限如 ls -l</li><li>-rwxr-xr-x</li></ul><p><img src="20180326091321898.png" alt="20180326091321898"></p><p><strong>权限所属对象:</strong></p><p><strong>1.拥有者</strong><br>生成文件或目录时登陆的当前人，权限最高，用u表示。</p><p><strong>2.同组人</strong><br>系统管理员分配的同组的一个或几个人，用g表示。</p><p><strong>3.其他人</strong><br>除拥有着，同组人以外的人，用o表示。</p><p><strong>4.所有人</strong><br>包括拥有着、同组人及其他人，用a表示。</p><h5 id="相关命令：chmod-chown"><a href="#相关命令：chmod-chown" class="headerlink" title="相关命令：chmod   chown"></a>相关命令：chmod   chown</h5><p><strong>chmod</strong>（英文全拼：change mode）命令是控制用户对文件的权限的命令</p><p>只有文件所有者和超级用户可以修改文件或目录的权限。可以使用绝对模式（八进制数字模式），符号模式指定文件的权限。<img src="file-permissions-rwx.jpg" alt="file-permissions-rwx"></p><p><strong>chown</strong>（英文全拼：change owner）命令用于设置文件所有者和文件关联组的命令。</p><p>利用 chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户 ID，组可以是组名或者组 ID，文件是以空格分开的要改变权限的文件列表，支持通配符。 。</p><p>chown 需要超级用户 root 的权限才能执行此命令。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
